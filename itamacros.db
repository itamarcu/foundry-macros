{"name":"query-from-list","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tXdzxGiUBOgt5HTR"}},"scope":"global","command":"/*\n--- query-from-list ---\nWill open a dialog for the user to select an option, and call a callback when it's complete.\n\nargs:\n  0  - query title\n  1  - query text\n  2  - callback to be called with selected option or null:\n  3+ - options\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/query-from-list.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nconst queryTitle = args[0]\nconst queryText = args[1]\nconst callback = args[2]\nconst queryOptions = args.slice(3)\n\nif (!queryTitle || !queryText || !callback || !queryOptions) {\n  return ui.notifications.error(\n    `query-from-list arguments should be (queryTitle, queryText, callback, ...queryOptions),` +\n    `but yours are: ${queryTitle}, ${queryText}, ${callback}, ${queryOptions}`,\n  )\n}\n\nlet template = `\n<div>\n    <div class=\"form-group\">\n        <label>${queryText}</label>\n        <select id=\"selectedOption\">`\nfor (let option of queryOptions) {\n  template += `<option value=\"${option}\">${option}</option>`\n}\ntemplate += `</select>\n    </div>\n</div>`\n\nnew Dialog({\n  title: queryTitle,\n  content: template,\n  buttons: {\n    ok: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: 'OK',\n      callback: async (html) => {\n        const selectedOption = html.find('#selectedOption')[0].value\n        console.log('selected option', selectedOption)\n        callback(selectedOption)\n      },\n    },\n    cancel: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: 'Cancel',\n      callback: async (html) => {\n        console.log('canceled')\n        callback(null)\n      },\n    },\n  },\n  default: 'cancel',\n}).render(true)","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/iw4sH39.png","actorIds":[],"_id":"0vX7Gx0m3PrKdVDU"}
{"name":"Setup Light/Vision","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.yeU9ybewhDsABwlL"}},"scope":"global","command":"/*\n--- Setup Light/Vision ---\nWill open two dialogs, for the user to set light and vision for the selected token.\n\ndepends on:\n  query-from-list\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/setup-light-and-vision.js\nsuggested icon:\nhttps://i.imgur.com/VfsnMXH.png\n*/\n\nconst VISION_OPTIONS = {\n  // <text>: [<brightSight>, <dimSight>]\n  'No change': null,\n  'None (1 ft)': [0, 1],\n  'Darkvision (30 ft)': [0, 30],\n  'Darkvision (60 ft)': [0, 60],\n  'Devil\\'s Sight (bright 120 ft)': [120, 0],\n}\n\nconst LIGHT_OPTIONS = {\n  // <text>: [<brightLight>, <dimLight>]\n  'No change': null,\n  'None': [0, 0],\n  'Candle': [5, 10],\n  'Torch or Light cantrip': [20, 40],\n  'Lantern - Hooded, dim': [0, 5],\n  'Lantern - Hooded, bright': [30, 60],\n}\n\nconst getDependency = async (entityMap, packName, entityName) => {\n  const existingEntity = entityMap.entities.find(t => t.name === entityName)\n  if (existingEntity) return existingEntity\n  const pack = game.packs.find(p => p.title === packName)\n  const inIndex = pack.index.find(it => it.name === entityName)\n  return inIndex ? pack.getEntity(inIndex._id) : null\n}\n\nconst runMacro = async (macroName, ...args) => {\n  const macro = (await getDependency(game.macros, 'itamacros', macroName))\n  if (macro === null) return ui.notifications.error(\n    `can't find macro: \"${macroName}\"`)\n  return macro.renderContent(...args)\n}\n\nconst setVision = (visionStr) => {\n  const vision = VISION_OPTIONS[visionStr]\n  if (!vision)\n    return\n  const [bright, dim] = vision\n  for (const token of canvas.tokens.controlled) {\n    token.update({\n      vision: true,\n      dimSight: dim,\n      brightSight: bright,\n    })\n  }\n}\n\nconst setLight = (lightStr) => {\n  const light = LIGHT_OPTIONS[lightStr]\n  if (!light)\n    return\n  const [bright, dim] = light\n  for (const token of canvas.tokens.controlled) {\n    token.update({\n      dimLight: dim,\n      brightLight: bright,\n    })\n  }\n}\n\nconst selectedTokenNames = canvas.tokens.controlled.map(\n  (it) => {return it.name}).join(', ')\n\nrunMacro('query-from-list',\n  'Selected tokens: ' + selectedTokenNames,\n  'Vision:',\n  setVision,\n  ...Object.keys(VISION_OPTIONS),\n)\n\nrunMacro('query-from-list',\n  'Selected tokens: ' + selectedTokenNames,\n  'Light:',\n  setLight,\n  ...Object.keys(LIGHT_OPTIONS),\n)","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/VfsnMXH.png","actorIds":[],"_id":"9cV4UavWw06gv9pe"}
{"name":"Crit Table","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.8yU70l7UUKIU3I6R"}},"scope":"global","command":"/*\n--- Crit Table ---\nRolls a crit from one of the expanded critical tables (required as Rollable Tables with those names)\n\ndepends on:\n  query-from-list\n  make-table-result-bold\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/crit-dialog.js\nsuggested icon:\nhttps://i.imgur.com/Pr6tXUH.png\n*/\n\nconst CRIT_TYPES = ['Bludgeoning', 'Piercing', 'Slashing', 'Fire', 'Acid', 'Cold', 'Force', 'Poison', 'Lightning', 'Necrotic', 'Psychic', 'Thunder', 'Radiant', 'Insanity', 'Minor Injury', 'Major Injury']\n\nconst getDependency = async (entityMap, packName, entityName) => {\n  const existingEntity = entityMap.entities.find(t => t.name === entityName)\n  if (existingEntity) return existingEntity\n  const pack = game.packs.find(p => p.title === packName)\n  const index = await pack.getIndex()\n  const inIndex = index.find(it => it.name === entityName)\n  return inIndex ? pack.getEntity(inIndex._id) : null\n}\n\nconst runMacro = async (macroName, ...args) => {\n  const macro = (await getDependency(game.macros, 'itamacros', macroName))\n  if (macro === null) return ui.notifications.error(`can't find macro: \"${macroName}\"`)\n  return macro.renderContent(...args)\n}\n\nconst callback = (tableName) => {\n  console.log('selected crit type', tableName)\n  runMacro('crit', tableName)\n}\n\nrunMacro('query-from-list',\n  'Critical Hit',\n  'Choose critical type:',\n  callback,\n  ...CRIT_TYPES\n)","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/Pr6tXUH.png","actorIds":[],"_id":"BfXPPZWXrXI0DVIO"}
{"name":"Turn to Face","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.xwSCxWDf51vVRhgt"}},"scope":"global","command":"/*\n--- Turn to Face ---\nSelect one or more tokens to be the turners. Target one token to be the target.\nWhenever the turner or the target move, the turner will rotate to face the target.\n(does not persist if you reload)\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/turn-to-face.js\nsuggested icon:\nhttps://i.imgur.com/HWWHd2W.png\n*/\n\nconst circle = 2 * Math.PI\nconst halfCircle = Math.PI\nconst toDegrees = 360 / circle\nconst hook_data_key = 'hook_id_for_turn_to_face'\n\nmain()\n\nfunction main() {\n  if (canvas.tokens.controlled.length === 0) {\n    return ui.notifications.error('You need to select at least one token to be the turner.')\n  }\n  // remove existing facing from\n  const detachedTokenNames = []\n  for (const turner of canvas.tokens.controlled) {\n    const existing_hook = turner.data[hook_data_key]\n    if (existing_hook !== undefined && existing_hook !== null) {\n      detachedTokenNames.push(turner.name)\n      Hooks.off('updateToken', existing_hook)\n      turner.update({[hook_data_key]: null})\n    }\n  }\n  if (detachedTokenNames.length > 0)\n    return ui.notifications.info(`Detached facing for: ${detachedTokenNames.join(', ')}`)\n\n  const target = Array.from(game.user.targets)[0]\n  if (target === undefined) {\n    return ui.notifications.error('You need to target one token.')\n  }\n  if (game.user.targets.size > 1) {\n    return ui.notifications.error('You cannot target more than one token.')\n  }\n\n  /**\n   * This function will make 'turner' turn towards 'target' once\n   */\n  const turn = (turner, target) => {\n    // angle is calculated between centers of tokens, using math\n    let rotationTowards = Math.atan2(target.center.y - turner.center.y, target.center.x - turner.center.x)\n    // adding 90° because JS and Foundry use different axes\n    rotationTowards += circle / 4\n    // adding 180° to make turner look towards the target instead of away\n    rotationTowards += halfCircle\n    // increasing/decreasing by 360° to make sure it's the closest rotation to the current one\n    const currentRotation = turner.icon.rotation\n    while (rotationTowards > currentRotation + halfCircle) rotationTowards -= circle\n    while (rotationTowards < currentRotation - halfCircle) rotationTowards += circle\n    // animation!\n    const maxDuration = 500\n    const duration = maxDuration * Math.abs(rotationTowards - currentRotation) / circle\n    // (locking to prevent refresh on hover)\n    turner.data.locked = true\n    CanvasAnimation.animateLinear(\n      [{parent: turner.icon, attribute: 'rotation', to: rotationTowards},],\n      {name: `Token.${turner.id}.turnToFace`, context: turner, duration: duration})\n      .then(() => {\n        // when animation is done we'll update the data\n        return turner.update({'rotation': rotationTowards * toDegrees})\n      })\n      .then(() => {\n        // (unlocking))\n        turner.data.locked = false\n      })\n  }\n\n  // setting up hooks for all turners, and also making them immediately turn to their target\n  for (const turner of canvas.tokens.controlled) {\n    if (target.id === turner.id) {\n      ui.notifications.error('A token cannot face itself!')\n      continue\n    }\n    const hook_id = Hooks.on('updateToken', async (scene, tok, updateData) => {\n      // hook should call turn() when the target or the turner move (change their X or Y)\n      if (!(\n        !!target.transform && !!turner.transform\n        && (tok._id === target.id || tok._id === turner.id)\n        && (updateData.x || updateData.y)\n      )) return\n      turn(turner, target)\n    })\n\n    turner.update({[hook_data_key]: hook_id})\n    turn(turner, target)\n  }\n}","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/HWWHd2W.png","actorIds":[],"_id":"H6NLmqI0qv5oIqVV"}
{"name":"Hide Names, Hide Bars","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.5PyB3iSsgNCOxxyM"}},"scope":"global","command":"/*\n--- Hide Names, Hide Bars ---\nFor all selected tokens, names will be hidden (except owner hover) and bars will be hidden.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/hide-names-hide-bars.js\nsuggested icon:\nhttps://i.imgur.com/R8klQVl.png\n*/\n\nmain()\n\nasync function main () {\n  // Update all selected tokens (yeah I know it's better to update them all at once than one by one but I'm lazy)\n  for (let token of canvas.tokens.controlled) {\n      await token.update({\n          displayBars: CONST.TOKEN_DISPLAY_MODES.NONE,\n          displayName: CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,\n      });\n  }\n}","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/R8klQVl.png","actorIds":[],"_id":"HMSiAFrTpDgy9ZEy"}
{"name":"Token Image Swap","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.QRj2AMWr8hvsv6fb"}},"scope":"global","command":"/*\n--- Token Image Swap ---\nChanges a selected token's image to the next one in a custom sequence. Can also change scale.\nHold Ctrl when executing the macro to set the images.\nHold Alt when executing the macro to switch to the previous image in the sequence, instead.\n\nWhen setting images, the format is:\n\n  [image_link] [scale]? # [comment]?\n\nscale is 1 by default, if omitted.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/token-image-swap.js\nsuggested icon:\nhttps://i.imgur.com/X2mAfEC.png\n*/\n\nconst SCOPE = 'world'\nconst KEY_OPTIONS = 'token-image-swap'\nconst KEY_CURRENT_INDEX = 'token-image-swap_index'\n\nmain()\n\nfunction main() {\n  const tok = canvas.tokens.controlled[0]\n  if (tok === undefined)\n    return ui.notifications.error('No token selected for Token Image Swap!')\n  const actor = tok.actor\n  if (!actor)\n    return ui.notifications.error('Cannot apply macro to tokens without an actor.')\n  if (game.keyboard._downKeys.has('Control')) return setupTokenImages(tok)\n  if (\n    actor.getFlag(SCOPE, KEY_OPTIONS) === undefined ||\n    actor.getFlag(SCOPE, KEY_OPTIONS).length === 0\n  )\n    return ui.notifications.error(\n      'Please hold the Ctrl key while activating this macro, to set up images.')\n  const imagesText = actor.data.flags[SCOPE][KEY_OPTIONS]\n  const options = imagesText.split('\\n')\n    .map(it => it.split('#')[0].trim())  // remove comments\n    .filter(it => it)  // remove empty lines\n  const optionImgs = options.map(it => it.split(' ')[0])\n  const optionScales = options\n    .map(it => it.split(' ')[1] || '1.0')\n    .map(it => parseFloat(it))\n  const currImg = tok.data.img\n  let imgIndex = actor.getFlag(SCOPE, KEY_CURRENT_INDEX) || 0  // || 0 is for backwards compatibility\n  if (!(0 <= imgIndex && imgIndex < options.length)) imgIndex = 0\n  const delta = game.keyboard._downKeys.has('Alt') ? -1 : +1\n  const nextIndex = (imgIndex + delta + options.length) % options.length\n  const nextImg = optionImgs[nextIndex]\n  const nextScale = optionScales[nextIndex]\n  tok.update({'img': nextImg, 'scale': nextScale})\n  tok.actor.setFlag(SCOPE, KEY_CURRENT_INDEX, nextIndex)\n}\n\nfunction setupTokenImages(tok) {\n  const actor = tok.actor\n  let existingUrlsValue = actor.getFlag(SCOPE, KEY_OPTIONS) || ''\n  if (existingUrlsValue && !existingUrlsValue.endsWith('\\n'))\n    existingUrlsValue += '\\n'\n  if (!existingUrlsValue.includes(tok.data.img)) {\n    // add current to list\n    existingUrlsValue += tok.data.img + ' ' + tok.data.scale + '   # ' + tok.name + '\\n'\n  }\n  const dialog = new Dialog({\n    title: `Token Image Swap - image list for ${actor.name}`,\n    content: `\n     <p>Please put image links here, each in a new line. You can add comments after URLs by adding \n     one or more spaces; for example, \"https://i.imgur.com/Ja8iNNg.png &nbsp;&nbsp;&nbsp;dragon form\".</p>\n      <div>\n       <textarea style=\"height: 250px\" id=\"urls-text\" name=\"urls\" autofocus=\"autofocus\">${existingUrlsValue}</textarea>\n      </div>\n     `,\n    buttons: {\n      one: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: 'Set images',\n        callback: (html) => {\n          const urlsText = html.find('#urls-text')[0].value\n          actor.setFlag(SCOPE, KEY_OPTIONS, urlsText)\n          if (actor.getFlag(SCOPE, KEY_CURRENT_INDEX) === undefined)\n            tok.actor.setFlag(SCOPE, KEY_CURRENT_INDEX, 0)\n          existingUrlsValue = urlsText\n          console.log(`Token Image Swap | setting image list for ${actor.name}: ${urlsText}`)\n        },\n      },\n      two: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: 'Cancel',\n        callback: () => {\n          console.log('Token Image Swap | canceled token image setup')\n        },\n      },\n    },\n    // NO DEFAULT - on purpose, to allow Enter key in text input\n    // default: 'one',\n  })\n  dialog.position.width = 500\n  dialog.render(true)\n}","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/X2mAfEC.png","actorIds":[],"_id":"INRaT3GqqQu0B9Pj"}
{"name":"error","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.WCMyZfDWBURfR4p7"}},"scope":"global","command":"/*\n--- error ---\nDisplay an error message in the chat and console log. This is just a convenience method.\n\nargs:\n  0+ words, which will be concatenated. You should wrap them with \" if you're calling this via chat.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/error.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nlet message = args.join(' ') || '[no error message]'\n\nconsole.log('Error printed: ' + JSON.stringify(args))\n\nlet chatData = {\n  user: game.user._id,\n  speaker: ChatMessage.getSpeaker(),\n  content: 'Error: ' + message,\n}\nChatMessage.create(chatData, {})","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/iw4sH39.png","actorIds":[],"_id":"KkwknuSb58ry6RrM"}
{"name":"Swap Positions","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.2QuZoKiUbqDGMXKE"}},"scope":"global","command":"/*\n--- Swap Positions ---\nSwap two selected tokens (use Shift for the multiselection)\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/swap-positions.js\nsuggested icon:\nhttps://static.thenounproject.com/png/232484-200.png\n*/\n\nmain()\n\nasync function main () {\n  const tokens = canvas.tokens.controlled\n  if (tokens.length !== 2) {\n    ui.notifications.warn('Please select exactly 2 tokens.', {})\n    return\n  }\n\n  const updates = [\n    {\n      _id: tokens[0].data._id,\n      x: tokens[1].data.x,\n      y: tokens[1].data.y,\n    },\n    {\n      _id: tokens[1].data._id,\n      x: tokens[0].data.x,\n      y: tokens[0].data.y,\n    },\n  ]\n\n  await canvas.scene.updateEmbeddedEntity('Token', updates)\n}","author":"chBZeKgbHJ17qeha","img":"https://static.thenounproject.com/png/232484-200.png","actorIds":[],"_id":"UJTUObfMJ5wPfpyb"}
{"name":"Crit Fail","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.N8cQIrxqITsnURs2"}},"scope":"global","command":"/*\n--- critfail ---\nRolls and shows a result from the Critical Fail table (required as a rollable table)\n\ndepends on:\n  make-table-result-bold\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/critfail.js\nsuggested icon:\nhttps://i.imgur.com/huPpJQf.png\n*/\n\nconst getDependency = async (entityMap, packName, entityName) => {\n  const existingEntity = entityMap.entities.find(t => t.name === entityName)\n  if (existingEntity) return existingEntity\n  const pack = game.packs.find(p => p.title === packName)\n  const index = await pack.getIndex()\n  const inIndex = index.find(it => it.name === entityName)\n  return inIndex ? pack.getEntity(inIndex._id) : null\n}\n\nconst runMacro = async (macroName, ...args) => {\n  const macro = (await getDependency(game.macros, 'itamacros', macroName))\n  if (macro === null) return ui.notifications.error(`can't find macro: \"${macroName}\"`)\n  return macro.renderContent(...args)\n}\n\nconst table = await getDependency(game.tables, 'Critical Hits', 'Critical Fail')\nconst roll = table.roll()\nconst rollPart = roll.roll\nconst resultPart = Object.assign({}, roll.results[0]) // copy, otherwise we edit original table! :O\nresultPart.text = await runMacro('make-table-result-bold', resultPart.text)\n\ntable.draw({ roll: rollPart, results: [resultPart] })","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/huPpJQf.png","actorIds":[],"_id":"WjeYm24woPPco93y"}
{"name":"Clear Conditions","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.aSNWccVxCl8Gc1c7"}},"scope":"global","command":"/*\n--- Clear Conditions ---\nClear all conditions from all selected tokens.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/clear-conditions.js\nsuggested icon:\nhttps://game-icons.net/icons/ffffff/000000/1x1/delapouite/broom.svg\n*/\n\nmain()\n\nasync function main () {\n  for (const token of canvas.tokens.controlled) {\n    await token.update({ 'effects': [], 'overlayEffect': '' })\n  }\n}","author":"chBZeKgbHJ17qeha","img":"https://game-icons.net/icons/ffffff/000000/1x1/delapouite/broom.svg","actorIds":[],"_id":"aX95JeHvWMf9t2z8"}
{"name":"Delete Measurements","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.45fe9NmnMoakxSUX"}},"scope":"global","command":"/*\n--- Delete Measurements ---\nDeletes all template measurements on the map (e.g. if you want to remove all visual spell areas).\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/delete-measurements.js\nsuggested icon:\nhttps://game-icons.net/icons/ffffff/000000/1x1/delapouite/broom.svg\n*/\n\ncanvas.templates.deleteAll()","author":"chBZeKgbHJ17qeha","img":"https://game-icons.net/icons/ffffff/000000/1x1/delapouite/broom.svg","actorIds":[],"_id":"arnSfrqYZZ2y8Oer"}
{"name":"Show Artwork","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.maMMjMoRsw94vts1"}},"scope":"global","command":"function main() {\n  const latestImagePopout = game.user.apps['show-artwork'] // yes this is hacky but I don't know better\n  if (latestImagePopout !== undefined) latestImagePopout.close()\n  const tok = canvas.tokens.controlled[0]\n    || canvas.tokens.placeables.find(it => it.mouseInteractionManager.state === 1)\n  if (tok === undefined)\n    return ui.notifications.warn('Please select/hover token first.')\n  let target = tok.actor || tok\n  const imagePopout = new ImagePopout(target.data.img, {\n    title: target.name,\n    shareable: true,\n    uuid: target.uuid,\n  })\n  imagePopout.render(true)\n  game.user.apps['show-artwork'] = imagePopout\n}","author":"chBZeKgbHJ17qeha","img":"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/openmoji/252/framed-picture_1f5bc.png","actorIds":[],"_id":"c8EYoaKHhxjBPLUe"}
{"name":"Turn Selected Towards Cursor","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.xStn6Qd564KKaiIk"}},"scope":"global","command":"/*\n--- Turn Selected Towards Cursor ---\nCauses all selected tokens to rotate towards the cursor\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/turn-selected-towards-cursor.js\nsuggested icon:\nhttps://game-icons.net/icons/ffffff/000000/1x1/delapouite/look-at.svg\n */\n\nconst mouse = canvas.app.renderer.plugins.interaction.mouse\nconst m = mouse.getLocalPosition(canvas.app.stage)\n\nconst changes = canvas.tokens.controlled.map(t => {\n  const c = t.center\n  let rotation = (Math.atan2(m.y - c.y, m.x - c.x) * 180 / Math.PI + 180) % 360\n  rotation = (rotation + 90) % 360  // down = 0\n  return {t, rotation}\n})\n\n// update preview\nchanges.forEach(x => {\n  const {t, rotation} = x\n  let newRotation = rotation * Math.PI / 180\n  const currentRotation = t.icon.rotation\n  while (newRotation > currentRotation + Math.PI) newRotation -= 2 * Math.PI\n  while (newRotation < currentRotation - Math.PI) newRotation += 2 * Math.PI\n  const duration = Math.abs(newRotation - currentRotation) / Math.PI * 300\n  t.data.locked = true\n  CanvasAnimation.animateLinear([\n    {parent: t.icon, attribute: 'rotation', to: newRotation},\n//        {parent: t.data, attribute: 'rotation', to: newRotation},\n  ], {name: `Token.${t.id}.animateRotationTowardsPoint`, context: t.icon, duration: duration}).then(() => {\n    return t.update({'rotation': rotation})\n  }).then(() => {\n    // we locked this to prevent refresh on hover\n    t.data.locked = false\n  })\n})","author":"chBZeKgbHJ17qeha","img":"https://game-icons.net/icons/ffffff/000000/1x1/delapouite/look-at.svg","actorIds":[],"_id":"fFxoHp0UZbRe8WKO"}
{"name":"crit","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Rz53sXI0uHqexwXi"}},"scope":"global","command":"/*\n--- crit ---\nRolls a crit from one of the expanded critical tables (required as Rollable Tables with those names)\n\nargs:\n  0 - one of the damage types, plus \"Insanity\", \"Minor Injury\", \"Major Injury\", \"Critical Fumble\"\n\ndepends on:\n  critfail\n  error\n  make-table-result-bold\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/crit.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nconst input0 = args[0] || 'undefined'\nlet input = input0.toLowerCase().trim()\n\nconst CRIT_TYPES = [\n  'Bludgeoning',\n  'Piercing',\n  'Slashing',\n  'Fire',\n  'Acid',\n  'Cold',\n  'Force',\n  'Poison',\n  'Lightning',\n  'Necrotic',\n  'Psychic',\n  'Thunder',\n  'Radiant',\n  'Insanity',\n  'Minor Injury',\n  'Major Injury',\n  'Critical Fumble',\n  'Failure',\n]\n\nconst getDependency = async (entityMap, packName, entityName) => {\n  const existingEntity = entityMap.entities.find(t => t.name === entityName)\n  if (existingEntity) return existingEntity\n  const pack = game.packs.find(p => p.title === packName)\n  const index = await pack.getIndex()\n  const inIndex = index.find(it => it.name === entityName)\n  return inIndex ? pack.getEntity(inIndex._id) : null\n}\n\nconst runMacro = async (macroName, ...args) => {\n  const macro = (await getDependency(game.macros, 'itamacros', macroName))\n  if (macro === null) return ui.notifications.error(`can't find macro: \"${macroName}\"`)\n  return macro.renderContent(...args)\n}\n\nlet critType = null\nfor (const crit of CRIT_TYPES) {\n  if (crit.toLowerCase().includes(input)) {\n    critType = crit\n    break\n  }\n}\n\nif (critType === null)\n  return runMacro('error', `You should pick a crit type from: ${CRIT_TYPES.join(', ')}`)\n\nif (critType === 'Failure' || critType === 'Critical Fumble')\n  return runMacro('critfail')\n\nconst table = await getDependency(game.tables, 'Critical Hits', critType)\nif (!table) {\n  return runMacro('error', `Failed using ${input} crit - make sure you have the Critical Hits compendium`)\n}\n\nconst roll = table.roll()\nconst rollPart = roll.roll\nconst resultPart = Object.assign({}, roll.results[0]) // copy, otherwise we edit original table! :O\nresultPart.text = await runMacro('make-table-result-bold', resultPart.text)\n\ntable.draw({roll: rollPart, results: [resultPart]})","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/iw4sH39.png","actorIds":[],"_id":"ixTZJbVE8j0gOvj3"}
{"name":"Spend Hit Die","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.lAFXUMsh57hsQ41s"}},"scope":"global","command":"/*\n--- Spend Hit Die (5e) ---\nThis will spend your highest remaining hit die, rolling it and showing the result in the chat (not adding Constitution).\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/spend-hit-die.js\nsuggested icon:\nhttps://reprog.files.wordpress.com/2011/01/1d8.png\n */\n\nconst classes = actor.data.items.filter(it => { return it.type === 'class' })\nlet best = null\nclasses.forEach(it => {\n  const diceData = {\n    classItem: it,\n    diceUsed: it.data.hitDiceUsed,\n    diceRemaining: it.data.levels - it.data.hitDiceUsed,\n    diceSize: parseInt(it.data.hitDice.substring(1)),\n  }\n  if (diceData.diceRemaining > 0 && (best === null || diceData.diceSize > best.diceSize)) {\n    best = diceData\n  }\n})\n\nif (best === null) {\n  ui.notifications.error(`${actor.name} has no remaining hit dice!`)\n  return\n}\n\nactor.items.get(best.classItem._id).update({ 'data.hitDiceUsed': best.diceUsed + 1 })\nconst roll = new Roll('1d' + best.diceSize)\nroll.roll()\nawait ChatMessage.create({\n  speaker: ChatMessage.getSpeaker({ actor }),\n  content: `${actor.name} spends a <b>${best.classItem.name}</b> hit die.\\nRemaining: ${best.diceRemaining - 1}/${best.classItem.data.levels}.`,\n})\nawait roll.toMessage()","author":"chBZeKgbHJ17qeha","img":"https://reprog.files.wordpress.com/2011/01/1d8.png","actorIds":[],"_id":"nruzYkTwWNQkY1nb"}
{"name":"Flip","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.4EObNpnrlDWUAazU"}},"scope":"global","command":"/*\n--- Flip ---\nFlips the selected token image along the X axis.\nYou can edit this to flip across the Y axis by replacing mirrorX with mirrorY.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/flip.js\nsuggested icon:\nhttps://emojiguide.org/images/emoji/1/w8iuxo1l9in91.png\n */\n\nfor (const token of canvas.tokens.controlled) {\n  const flip = !token.data.mirrorX || false\n  token.update({ mirrorX: flip })\n}","author":"chBZeKgbHJ17qeha","img":"https://emojiguide.org/images/emoji/1/w8iuxo1l9in91.png","actorIds":[],"_id":"oSPcvwfozJsgc3Xk"}
{"name":"make-table-result-bold","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.76nqkr3DYAg9gMLj"}},"scope":"global","command":"/*\n--- make-table-result-bold ---\nConverts text from crit tables to make the first sentence bold\n\nargs:\n  0 - text to make bold\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/make-table-result-bold.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nlet text = args[0]\nif (text === null || text === undefined) {\n  ui.notifications.error(`make-table-result-bold should have an argument!`)\n  return ''\n}\nconst periodIndex = text.search(/[.!?]/g)\nif (periodIndex === -1)\n  return '<b>(!)</b>' + text\nconst titleText = text.substring(0, periodIndex + 1)\nconst restOfText = text.substring(periodIndex + 1)\nreturn `<b>${titleText}</b>${restOfText}`","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/iw4sH39.png","actorIds":[],"_id":"tK0c90l8ibOcej4z"}
{"name":"i","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.wJs5wSgPrrOKwCCV"}},"scope":"global","command":"/*\n--- i ---\nAllows using /i to type italics text.\n\nargs:\n  0+ words, which will be concatenated. You should wrap them with \" if you're calling this via chat.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/i.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nconst text = args.join(' ')\nreturn `<i>${text}</i>`","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/iw4sH39.png","actorIds":[],"_id":"wA4SOoTGn77eX5Zu"}
{"name":"Filter Macros","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.OLlm7ob8hWKNQdsQ"}},"scope":"global","command":"/*\n--- Filter Macros ---\nFilters macro directory to only show macros from a certain author (edit this macro with author name).\nActivate this with macro directory open.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/filter-macros.js\nsuggested icon:\nhttps://game-icons.net/icons/ffffff/000000/1x1/delapouite/funnel.svg\n*/\n\nconst authorName = 'INSERT_PLAYER_NAME_HERE'\n\n$('#macros > ol')\n  .children()\n  .filter((i, listItem) => {\n    const macro = game.macros.get(listItem.getAttribute('data-entity-id'))\n    const author = game.users.get(macro.data.author)\n    return author.name !== authorName\n  })\n  .remove()","author":"chBZeKgbHJ17qeha","img":"https://game-icons.net/icons/ffffff/000000/1x1/delapouite/funnel.svg","actorIds":[],"_id":"xyF7YmmwY6RlYOWJ"}
{"name":"anime-attack","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Nxfa0Ka84p4WNQq4"}},"scope":"global","command":"/*\n--- Anime Attack ---\nWill rename the next ability into a cool anime attack.\nActivate this right before rolling a spell/item/feature.\nThis comes with prepared image lists, so it will also change the ability icon,\nbut you can just remove that part of the code if you don't need that.\n\nYou can also use something like BetterRolls to create a simple macro!\nfor example, this is my macro for unarmed strikes:\n\n    game.macros.getName('anime-attack').renderContent(1)\n    BetterRolls.quickRollById(\"X5imh1VGNcYYAzPP\", \"IKxYgPrDJj737hQt\")\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/anime-attack.js\nsuggested icon:\nhttps://i.imgur.com/YptofqA.png\n*/\n\n// Anime attack type template number. Set this if you want just one of the options.\n// examples:\n// 1 - Armageddon Barrage\n// 2 - Majestic Lion Burst\n// 3 - Watchful Shark, Splitting Jackal\n// 4 - Whirling Crush of Darling Star\nconst ANIME_ATTACK_TYPE = (args && parseInt(args[0]))\n\nfunction animeImageGen () {\n  const type = ANIME_ATTACK_TYPE || pick([1, 2])\n  if (type === 1) {\n    // unarmed strike, low damage\n    return pick([\n      'systems/dnd5e/icons/skills/fire_07.jpg', // fist\n      'systems/dnd5e/icons/skills/yellow_08.jpg', // fist\n      'systems/dnd5e/icons/skills/yellow_17.jpg', // headbutt?\n      'https://i.imgur.com/Pxu0IdR.png', // kick\n      'https://i.imgur.com/b4DKm4z.png', // flying kick\n      'https://i.imgur.com/xS7HhZN.png', // uppercut\n    ])\n  } else if (type === 2) {\n    // quarterstaff attack, medium damage\n    return pick([\n      'systems/dnd5e/icons/skills/blue_23.jpg', // quarterstaff\n      'systems/dnd5e/icons/skills/red_05.jpg', // quarterstaff\n      'https://i.imgur.com/Dm7jb2E.png', // red swipe thing\n    ])\n  }\n  return null\n}\n\n// NAME GENERATOR SOURCE: https://www.fantasynamegenerators.com/anime-attack-names.php\nconst nm1=[\"Abominable\",\"Aching\",\"Adamantine\",\"Adept\",\"Advanced\",\"Aggressive\",\"Agile\",\"Agonizing\",\"Amplified\",\"Ancient\",\"Angelic\",\"Angry\",\"Arch\",\"Azure\",\"Basic\",\"Black\",\"Blinding\",\"Bright\",\"Brilliant\",\"Brutal\",\"Burning\",\"Careless\",\"Chaotic\",\"Chief\",\"Classic\",\"Clean\",\"Colossal\",\"Combination\",\"Complete\",\"Complex\",\"Composed\",\"Confusing\",\"Corrupt\",\"Counter\",\"Courageous\",\"Crazed\",\"Crazy\",\"Crimson\",\"Cruel\",\"Crushing\",\"Dancing\",\"Dark\",\"Dead\",\"Deadly\",\"Defensive\",\"Defiant\",\"Definitive\",\"Delayed\",\"Delirious\",\"Demonic\",\"Devouring\",\"Dieing\",\"Diligent\",\"Direct\",\"Dirty\",\"Double\",\"Draconic\",\"Drunken\",\"Dual\",\"Dynamic\",\"Eager\",\"Elegant\",\"Elementary\",\"Enchanted\",\"Enchanting\",\"Enlightened\",\"Enraged\",\"Executing\",\"Expert\",\"Extreme\",\"Fading\",\"Faint\",\"Fake\",\"Falling\",\"False\",\"Fatal\",\"Fearless\",\"Feral\",\"Firm\",\"First\",\"Flawless\",\"Flowing\",\"Flying\",\"Focused\",\"Forbidden\",\"Forsaken\",\"Frozen\",\"Furious\",\"Giant\",\"Gigantic\",\"Gilded\",\"Glaring\",\"Golden\",\"Graceful\",\"Grand\",\"Grave\",\"Greater\",\"Grim\",\"Hallowed\",\"Haunting\",\"Hidden\",\"High\",\"Hollow\",\"Holy\",\"Honored\",\"Humming\",\"Hungry\",\"Identical\",\"Impending\",\"Impossible\",\"Impure\",\"Infinite\",\"Iron\",\"Leaping\",\"Light\",\"Living\",\"Lucky\",\"Majestic\",\"Major\",\"Minor\",\"Misty\",\"Mithril\",\"Mixed\",\"Monstrous\",\"Mortal\",\"Mysterious\",\"Nimble\",\"Numbing\",\"Obsidian\",\"Parallel\",\"Perfect\",\"Powerful\",\"Primal\",\"Primary\",\"Prime\",\"Pristine\",\"Puny\",\"Pure\",\"Quick\",\"Quiet\",\"Rabid\",\"Ragged\",\"Rapid\",\"Raw\",\"Reckless\",\"Reflecting\",\"Regal\",\"Rotten\",\"Rough\",\"Royal\",\"Sadistic\",\"Savage\",\"Scarlet\",\"Scathing\",\"Sealed\",\"Secret\",\"Serene\",\"Severing\",\"Shallow\",\"Shameless\",\"Shining\",\"Shocking\",\"Silent\",\"Silver\",\"Simple\",\"Single\",\"Skeletal\",\"Slaying\",\"Smooth\",\"Sneaky\",\"Straight\",\"Steel\",\"Stunning\",\"Subtle\",\"Super\",\"Superior\",\"Surging\",\"Surprise\",\"Swift\",\"Thundering\",\"Timeless\",\"True\",\"Twin\",\"Unholy\",\"Unleashed\",\"Vacuum\",\"Vengeful\",\"Vicious\",\"Vile\",\"Violent\",\"Violet\",\"Warped\",\"Weeping\",\"Whispered\",\"White\",\"Wicked\",\"Wild\",\"Winding\",\"Wise\",\"Wretched\"];\nconst nm2=[\"Angel\",\"Annihilation\",\"Arachnid\",\"Armageddon\",\"Ash\",\"Assassin\",\"Aura\",\"Autumn\",\"Avalanche\",\"Bane\",\"Barrier\",\"Bear\",\"Beast\",\"Behemoth\",\"Bird\",\"Blessing\",\"Blizzard\",\"Blood\",\"Blossom\",\"Body\",\"Bomb\",\"Bone\",\"Boulder\",\"Bubble\",\"Bug\",\"Butterfly\",\"Camouflage\",\"Canine\",\"Chain\",\"Chakra\",\"Chaos\",\"Claw\",\"Clone\",\"Cloud\",\"Cocoon\",\"Cold\",\"Comet\",\"Cosmos\",\"Crab\",\"Crane\",\"Crescent\",\"Cricket\",\"Crystal\",\"Darkness\",\"Day\",\"Daydream\",\"Death\",\"Deception\",\"Delusion\",\"Demon\",\"Diamond\",\"Dragon\",\"Dragonfly\",\"Dream\",\"Droplet\",\"Dust\",\"Earth\",\"Earthquake\",\"Echo\",\"Electric\",\"Elemental\",\"Elephant\",\"Enigma\",\"Execution\",\"Exorcism\",\"Explosion\",\"Falcon\",\"Fang\",\"Feather\",\"Feline\",\"Fire\",\"Flame\",\"Frost\",\"Frostfire\",\"Fury\",\"Ghost\",\"Giant\",\"God\",\"Golem\",\"Gravity\",\"Hawk\",\"Head\",\"Heaven\",\"Hell\",\"Hellfire\",\"Hornet\",\"Horror\",\"Hot\",\"Hurricane\",\"Ice\",\"Illusion\",\"Impact\",\"Inferno\",\"Infinity\",\"Instant\",\"Jaw\",\"Judgment\",\"Ki\",\"Lava\",\"Leaf\",\"Leech\",\"Legend\",\"Light\",\"Lightning\",\"Lily\",\"Limbo\",\"Lion\",\"Lotus\",\"Magma\",\"Mania\",\"Maple\",\"Melting\",\"Meteor\",\"Mime\",\"Mind\",\"Mirror\",\"Mist\",\"Monkey\",\"Moon\",\"Moonlight\",\"Mountain\",\"Needle\",\"Night\",\"Nightmare\",\"Nova\",\"Oak\",\"Oracle\",\"Palm\",\"Panther\",\"Paragon\",\"Paralysis\",\"Petal\",\"Phantom\",\"Phoenix\",\"Poison\",\"Prism\",\"Prison\",\"Propulsion\",\"Puppet\",\"Quick\",\"Rage\",\"Rain\",\"Rainbow\",\"Retribution\",\"Reverse\",\"River\",\"Rock\",\"Sand\",\"Scorpion\",\"Secret\",\"Serpent\",\"Shadow\",\"Shark\",\"Skeleton\",\"Sky\",\"Smoke\",\"Snake\",\"Snow\",\"Soul\",\"Spider\",\"Spiral\",\"Spirit\",\"Spring\",\"Starfall\",\"Starlight\",\"Stealth\",\"Stone\",\"Storm\",\"Summer\",\"Sun\",\"Sunlight\",\"Supreme\",\"Talon\",\"Teardrop\",\"Terror\",\"Thorn\",\"Thunder\",\"Tiger\",\"Tornado\",\"Toxin\",\"Tree\",\"Turtle\",\"Twin\",\"Typhoon\",\"Vapor\",\"Vengeance\",\"Venom\",\"Void\",\"Vortex\",\"Water\",\"Waterfall\",\"Whirlwind\",\"Wild\",\"Willow\",\"Wind\",\"Wing\",\"Winter\",\"Wolf\",\"Yang\",\"Yin\"];\nconst nm3=[\"Ambush\",\"Assault\",\"Attack\",\"Barrage\",\"Bash\",\"Binding\",\"Bite\",\"Blade\",\"Blast\",\"Blitz\",\"Blow\",\"Bolt\",\"Bullet\",\"Burst\",\"Bust\",\"Cannon\",\"Chain\",\"Charge\",\"Chop\",\"Clap\",\"Claw\",\"Coil\",\"Crack\",\"Crush\",\"Cut\",\"Dance\",\"Dive\",\"Drain\",\"Eruption\",\"Fall\",\"Fang\",\"Fist\",\"Fists\",\"Flash\",\"Flush\",\"Force\",\"Fracture\",\"Hit\",\"Hurl\",\"Impact\",\"Jolt\",\"Kick\",\"Kiss\",\"Knock\",\"Launch\",\"Method\",\"Pound\",\"Punch\",\"Push\",\"Raze\",\"Release\",\"Rush\",\"Seal\",\"Shatter\",\"Shock\",\"Shot\",\"Slam\",\"Slash\",\"Smash\",\"Spear\",\"Spell\",\"Stab\",\"Stomp\",\"Strike\",\"Surge\",\"Technique\",\"Thrust\",\"Trap\",\"Trash\",\"Volley\",\"Wave\",\"Whip\"];\nconst nm4=[\"Admired\",\"Adored\",\"Advanced\",\"Aether\",\"Alert\",\"Anchored\",\"Ancient\",\"Angelic\",\"Arctic\",\"Aromatic\",\"Authentic\",\"Autumn\",\"Beautiful\",\"Beloved\",\"Bitter\",\"Bleak\",\"Blind\",\"Blissful\",\"Bold\",\"Bright\",\"Brilliant\",\"Broken\",\"Bronze\",\"Calm\",\"Careful\",\"Careless\",\"Clouded\",\"Colossal\",\"Common\",\"Composed\",\"Corrupt\",\"Crescent\",\"Cruel\",\"Damaged\",\"Dapper\",\"Darling\",\"Dearest\",\"Defensive\",\"Demise\",\"Demonic\",\"Dependable\",\"Determined\",\"Devoted\",\"Diligent\",\"Dual\",\"Dutiful\",\"Eager\",\"Earnest\",\"Echo\",\"Eclipse\",\"Elegant\",\"Enchanted\",\"Enigma\",\"Esteemed\",\"Everlasting\",\"Evil\",\"Exalted\",\"False\",\"Fatal\",\"Fearless\",\"Flawless\",\"Focused\",\"Forceful\",\"Forsaken\",\"Fortunate\",\"Gentle\",\"Giant\",\"Gigantic\",\"Glacier\",\"Glorious\",\"Golden\",\"Graceful\",\"Grand\",\"Grave\",\"Gravity\",\"Grim\",\"Hallowed\",\"Harmonic\",\"Harmonious\",\"Haunting\",\"Heaven\",\"Heavenly\",\"Hell\",\"Hibernating\",\"Hidden\",\"Hollow\",\"Honored\",\"Horizon\",\"Humble\",\"Hungry\",\"Illusion\",\"Imitation\",\"Immortal\",\"Juvenile\",\"Kings\",\"Last\",\"Legend\",\"Light\",\"Living\",\"Lone\",\"Lonely\",\"Lost\",\"Loyal\",\"Lucky\",\"Lunar\",\"Majestic\",\"Menacing\",\"Mild\",\"Mysterious\",\"Nimble\",\"Outlandish\",\"Parallel\",\"Parasitic\",\"Peaceful\",\"Perfect\",\"Poison\",\"Powerful\",\"Prestigious\",\"Prime\",\"Prism\",\"Prison\",\"Proud\",\"Quick\",\"Quiet\",\"Radiant\",\"Rainbow\",\"Regal\",\"Royal\",\"Secret\",\"Serene\",\"Shadow\",\"Silent\",\"Skeletal\",\"Solar\",\"Spiteful\",\"Spring\",\"Stark\",\"Summer\",\"Swift\",\"Toxin\",\"True\",\"Twilight\",\"Twin\",\"Vengeful\",\"Venom\",\"Void\",\"Vortex\",\"Watchful\",\"Weather\",\"Wicked\",\"Wild\",\"Winter\",\"Wise\",\"Worthy\",\"Wretched\",\"Zealous\"];\nconst nm5=[\"Alligator\",\"Anaconda\",\"Angel\",\"Ape\",\"Armadillo\",\"Assassin\",\"Aura\",\"Axe\",\"Baboon\",\"Badger\",\"Bandicoot\",\"Basilisk\",\"Bear\",\"Beast\",\"Beaver\",\"Bee\",\"Beetle\",\"Behemoth\",\"Bird\",\"Blade\",\"Blood\",\"Blossom\",\"Boa\",\"Boar\",\"Body\",\"Bolt\",\"Branch\",\"Brook\",\"Buffalo\",\"Bug\",\"Butterfly\",\"Cat\",\"Chain\",\"Chameleon\",\"Chimp\",\"Claw\",\"Clone\",\"Cloud\",\"Cobra\",\"Cocoon\",\"Comet\",\"Condor\",\"Cougar\",\"Crab\",\"Crane\",\"Cricket\",\"Crocodile\",\"Crow\",\"Deer\",\"Demon\",\"Dove\",\"Dragon\",\"Dragonfly\",\"Eagle\",\"Edge\",\"Elephant\",\"Falcon\",\"Fang\",\"Feather\",\"Firefly\",\"Fish\",\"Flame\",\"Fog\",\"Forest\",\"Fox\",\"Frog\",\"Ghost\",\"Giant\",\"Goat\",\"God\",\"Golem\",\"Gorilla\",\"Grass\",\"Hare\",\"Hawk\",\"Head\",\"Hippo\",\"Hook\",\"Hornet\",\"Horse\",\"Hyena\",\"Ice\",\"Jackal\",\"Jaguar\",\"Katana\",\"Leaf\",\"Leech\",\"Lemur\",\"Light\",\"Lightning\",\"Lily\",\"Lizard\",\"Locust\",\"Lotus\",\"Lynx\",\"Macaw\",\"Magpie\",\"Mandrill\",\"Mantis\",\"Meteor\",\"Mime\",\"Mind\",\"Mist\",\"Monkey\",\"Moon\",\"Moose\",\"Mountain\",\"Mouse\",\"Mushroom\",\"Needle\",\"Night\",\"Nightingale\",\"Octopus\",\"Oracle\",\"Panda\",\"Panther\",\"Paragon\",\"Petal\",\"Phantom\",\"Phoenix\",\"Puppet\",\"Raccoon\",\"Rain\",\"Ram\",\"Rat\",\"Raven\",\"Rhino\",\"Rock\",\"Root\",\"Rose\",\"Salamander\",\"Scorpion\",\"Shark\",\"Shield\",\"Smoke\",\"Snake\",\"Snow\",\"Spear\",\"Spider\",\"Spirit\",\"Star\",\"Sun\",\"Swallow\",\"Swan\",\"Sword\",\"Tiger\",\"Titan\",\"Toad\",\"Tortoise\",\"Tree\",\"Turtle\",\"Viper\",\"Vulture\",\"Wasp\",\"Water\",\"Wolf\",\"Wolverine\",\"World\"];\nconst nm6=[\"Accelerating\",\"Activating\",\"Adapting\",\"Alighting\",\"Anticipating\",\"Arising\",\"Assembling\",\"Attaching\",\"Attacking\",\"Balancing\",\"Battling\",\"Beating\",\"Bending\",\"Binding\",\"Biting\",\"Bleeding\",\"Blessing\",\"Blinding\",\"Blowing\",\"Boiling\",\"Bolting\",\"Bouncing\",\"Breaking\",\"Breathing\",\"Burning\",\"Bursting\",\"Carving\",\"Casting\",\"Catching\",\"Changing\",\"Charging\",\"Chasing\",\"Cheating\",\"Chopping\",\"Clinging\",\"Coiling\",\"Coming\",\"Commanding\",\"Confusing\",\"Constructing\",\"Containing\",\"Contracting\",\"Controlling\",\"Copying\",\"Cracking\",\"Crashing\",\"Crawling\",\"Crossing\",\"Crushing\",\"Crying\",\"Curving\",\"Cutting\",\"Dancing\",\"Deceiving\",\"Destroying\",\"Directing\",\"Diverting\",\"Dividing\",\"Diving\",\"Doubling\",\"Draining\",\"Dreaming\",\"Drinking\",\"Drowning\",\"Drumming\",\"Eating\",\"Eliminating\",\"Ending\",\"Enduring\",\"Enforcing\",\"Enhancing\",\"Escaping\",\"Expanding\",\"Exploding\",\"Extending\",\"Extracting\",\"Fading\",\"Fearing\",\"Feeding\",\"Fetching\",\"Fighting\",\"Firing\",\"Flowing\",\"Flying\",\"Forcing\",\"Freezing\",\"Frightening\",\"Frying\",\"Glowing\",\"Grabbing\",\"Grinding\",\"Gripping\",\"Growing\",\"Guarding\",\"Harming\",\"Hating\",\"Hiding\",\"Hovering\",\"Hurting\",\"Hypnotizing\",\"Injecting\",\"Injuring\",\"Intensifying\",\"Interrupting\",\"Jesting\",\"Judging\",\"Kicking\",\"Killing\",\"Knocking\",\"Laughing\",\"Launching\",\"Leaping\",\"Living\",\"Melting\",\"Misleading\",\"Mixing\",\"Multiplying\",\"Obeying\",\"Overflowing\",\"Perfecting\",\"Pinching\",\"Planting\",\"Possessing\",\"Praying\",\"Pretending\",\"Preying\",\"Protecting\",\"Punching\",\"Puncturing\",\"Punishing\",\"Radiating\",\"Raging\",\"Raining\",\"Reducing\",\"Reflecting\",\"Reigning\",\"Releasing\",\"Removing\",\"Repeating\",\"Revealing\",\"Riding\",\"Ruining\",\"Ruling\",\"Running\",\"Rushing\",\"Saving\",\"Scattering\",\"Scorching\",\"Scratching\",\"Screaming\",\"Shining\",\"Shocking\",\"Shooting\",\"Singing\",\"Sinning\",\"Slaying\",\"Sleeping\",\"Smashing\",\"Smiting\",\"Sneaking\",\"Spinning\",\"Splitting\",\"Stinging\",\"Striking\",\"Suffering\",\"Tearing\",\"Thrusting\",\"Transforming\",\"Twisting\",\"Vanishing\",\"Wandering\",\"Watching\",\"Whirling\",\"Whistling\"];\n\nfunction pick (arr) {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nfunction animeAttackNameGen () {\n  const type = ANIME_ATTACK_TYPE || pick([1, 2, 3, 4])\n  if (type === 1) {\n    // Armageddon Barrage\n    return pick(nm2) + ' ' + pick(nm3)\n  } else if (type === 2) {\n    // Majestic Lion Burst\n    return pick(nm1) + ' ' + pick(nm2) + ' ' + pick(nm3)\n  } else if (type === 3) {\n    // Watchful Shark, Splitting Jackal\n    const rnd1 = pick(nm4), rnd2 = pick(nm5)\n    let rnd3 = pick(nm6), rnd4 = pick(nm5)\n    while (rnd2 === rnd4) rnd4 = pick(nm5)\n    while (rnd1 === rnd3) rnd4 = pick(nm5)\n    return rnd1 + ' ' + rnd2 + ', ' + rnd3 + ' ' + rnd4\n  } else if (type === 4) {\n    // Whirling Crush of Darling Star\n    return pick(nm6) + ' ' + pick(nm3) + ' of ' + pick(nm4) + ' ' + pick(nm5)\n  } else {\n    // error\n    console.error('macro expected 0 <= i <= 4')\n    return 'Anime Overflow'\n  }\n}\n\nfunction setupHookToReplaceNextAttackWith (animeName) {\n  Hooks.once('preCreateChatMessage', (data, options, userId) => {\n    if (userId !== game.userId) {\n      return ui.notifications.info(\n        `canceling ${animeName} because message was created by different user`)\n    }\n\n    // edit ability name\n    let base = null\n    let newName = null\n    data.content = data.content.replace(/<h3 class=\"item-name\">([^<]*)<\\/h3>/,\n      (a, b) => {\n        base = b.trim()\n        newName = animeAttackNameGen()\n        return `<h3 class=\"item-name\">${newName}!</h3>`\n      })\n    console.info(`animefied ${base} into ${newName}!`)\n\n    // edit icon\n    const newImg = animeImageGen()\n    if (newImg !== null) {\n      data.content = data.content.replace(/<img src=\"[^\"]*\" title=/,\n        `<img src=\"${newImg}\" title=`)\n    }\n  })\n}\n\nasync function main () {\n  setupHookToReplaceNextAttackWith()\n}\n\nmain()","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/YptofqA.png","actorIds":[],"_id":"yq9Zynv2Cwd3ygxi"}
{"name":"Show Names, Hide Bars","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.CPnS1Cbm4QNdVIPA"}},"scope":"global","command":"/*\n--- Show Names, Hide Bars ---\nFor all selected tokens, names will be shown and bars will be hidden.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/show-names-hide-bars.js\nsuggested icon:\nhttps://i.imgur.com/Wrt5uIE.png\n*/\n\nmain()\n\nasync function main () {\n  // Update all selected tokens (yeah I know it's better to update them all at once than one by one but I'm lazy)\n  for (let token of canvas.tokens.controlled) {\n    await token.update({\n      displayBars: CONST.TOKEN_DISPLAY_MODES.NONE,\n      displayName: CONST.TOKEN_DISPLAY_MODES.ALWAYS,\n    })\n  }\n}","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/Wrt5uIE.png","actorIds":[],"_id":"zt4HqqSzUZAoiyd3"}
{"name":"Setup Light/Vision","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.yeU9ybewhDsABwlL"}},"scope":"global","command":"/*\n--- Setup Light/Vision ---\nWill open two dialogs, for the user to set light and vision for the selected token.\n\ndepends on:\n  query-from-list\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/setup-light-and-vision.js\nsuggested icon:\nhttps://i.imgur.com/VfsnMXH.png\n*/\n\nconst VISION_OPTIONS = {\n  // <text>: [<brightSight>, <dimSight>]\n  'No change': null,\n  'None (1 ft)': [0, 1],\n  'Darkvision (30 ft)': [0, 30],\n  'Darkvision (60 ft)': [0, 60],\n  'Devil\\'s Sight (bright 120 ft)': [120, 0],\n}\n\nconst LIGHT_OPTIONS = {\n  // <text>: [<brightLight>, <dimLight>]\n  'No change': null,\n  'None': [0, 0],\n  'Candle': [5, 10],\n  'Torch or Light cantrip': [20, 40],\n  'Lantern - Hooded, dim': [0, 5],\n  'Lantern - Hooded, bright': [30, 60],\n}\n\nconst getDependency = async (entityMap, packName, entityName) => {\n  const existingEntity = entityMap.entities.find(t => t.name === entityName)\n  if (existingEntity) return existingEntity\n  const pack = game.packs.find(p => p.title === packName)\n  const index = await pack.getIndex()\n  const inIndex = index.find(it => it.name === entityName)\n  return inIndex ? pack.getEntity(inIndex._id) : null\n}\n\nconst runMacro = async (macroName, ...args) => {\n  const macro = (await getDependency(game.macros, 'itamacros', macroName))\n  if (macro === null) return ui.notifications.error(\n    `can't find macro: \"${macroName}\"`)\n  return macro.renderContent(...args)\n}\n\nconst setVision = (visionStr) => {\n  const vision = VISION_OPTIONS[visionStr]\n  if (!vision)\n    return\n  const [bright, dim] = vision\n  for (const token of canvas.tokens.controlled) {\n    token.update({\n      vision: true,\n      dimSight: dim,\n      brightSight: bright,\n    })\n  }\n}\n\nconst setLight = (lightStr) => {\n  const light = LIGHT_OPTIONS[lightStr]\n  if (!light)\n    return\n  const [bright, dim] = light\n  for (const token of canvas.tokens.controlled) {\n    token.update({\n      dimLight: dim,\n      brightLight: bright,\n    })\n  }\n}\n\nconst selectedTokenNames = canvas.tokens.controlled.map(\n  (it) => {return it.name}).join(', ')\n\nrunMacro('query-from-list',\n  'Selected tokens: ' + selectedTokenNames,\n  'Vision:',\n  setVision,\n  ...Object.keys(VISION_OPTIONS),\n)\n\nrunMacro('query-from-list',\n  'Selected tokens: ' + selectedTokenNames,\n  'Light:',\n  setLight,\n  ...Object.keys(LIGHT_OPTIONS),\n)","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/VfsnMXH.png","actorIds":[],"_id":"QgbtgZzC9N52I3HG"}
