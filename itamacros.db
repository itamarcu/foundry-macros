{"_id":"0vX7Gx0m3PrKdVDU","name":"query-from-list","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tXdzxGiUBOgt5HTR"}},"scope":"global","command":"/*\n--- query-from-list ---\nWill open a dialog for the user to select an option, and call a callback when it's complete.\n\nargs:\n  0  - query title\n  1  - query text\n  2  - callback to be called with selected option or null:\n  3+ - options\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/query-from-list.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nconst queryTitle = args[0]\nconst queryText = args[1]\nconst callback = args[2]\nconst queryOptions = args.slice(3)\n\nif (!queryTitle || !queryText || !callback || !queryOptions) {\n  return ui.notifications.error(\n    `query-from-list arguments should be (queryTitle, queryText, callback, ...queryOptions),` +\n    `but yours are: ${queryTitle}, ${queryText}, ${callback}, ${queryOptions}`,\n  )\n}\n\nlet template = `\n<div>\n    <div class=\"form-group\">\n        <label>${queryText}</label>\n        <select id=\"selectedOption\">`\nfor (let option of queryOptions) {\n  template += `<option value=\"${option}\">${option}</option>`\n}\ntemplate += `</select>\n    </div>\n</div>`\n\nnew Dialog({\n  title: queryTitle,\n  content: template,\n  buttons: {\n    ok: {\n      icon: '<i class=\"fas fa-check\"></i>',\n      label: 'OK',\n      callback: async (html) => {\n        const selectedOption = html.find('#selectedOption')[0].value\n        console.log('selected option', selectedOption)\n        callback(selectedOption)\n      },\n    },\n    cancel: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: 'Cancel',\n      callback: async (html) => {\n        console.log('canceled')\n        callback(null)\n      },\n    },\n  },\n  default: 'cancel',\n}).render(true)","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"BfXPPZWXrXI0DVIO","name":"Crit Table","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.8yU70l7UUKIU3I6R"}},"scope":"global","command":"/*\n--- Crit Table ---\nRolls a crit from one of the expanded critical tables (required as Rollable Tables with those names)\n\ndepends on:\n  query-from-list\n  make-table-result-bold\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/crit-dialog.js\nsuggested icon:\nhttps://i.imgur.com/Pr6tXUH.png\n*/\n\nconst CRIT_TYPES = ['Bludgeoning', 'Piercing', 'Slashing', 'Fire', 'Acid', 'Cold', 'Force', 'Poison', 'Lightning', 'Necrotic', 'Psychic', 'Thunder', 'Radiant', 'Insanity', 'Minor Injury', 'Major Injury']\n\nconst getDependency = async (entityMap, packName, entityName) => {\n  const existingEntity = entityMap.entities.find(t => t.name === entityName)\n  if (existingEntity) return existingEntity\n  const pack = game.packs.find(p => p.title === packName)\n  const index = await pack.getIndex()\n  const inIndex = index.find(it => it.name === entityName)\n  return inIndex ? pack.getEntity(inIndex._id) : null\n}\n\nconst runMacro = async (macroName, ...args) => {\n  const macro = (await getDependency(game.macros, 'itamacros', macroName))\n  if (macro === null) return ui.notifications.error(`can't find macro: \"${macroName}\"`)\n  return macro.renderContent(...args)\n}\n\nconst callback = (tableName) => {\n  console.log('selected crit type', tableName)\n  runMacro('crit', tableName)\n}\n\nrunMacro('query-from-list',\n  'Critical Hit',\n  'Choose critical type:',\n  callback,\n  ...CRIT_TYPES\n)","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/Pr6tXUH.png","actorIds":[]}
{"_id":"H6NLmqI0qv5oIqVV","name":"Turn to Face","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.xwSCxWDf51vVRhgt"}},"scope":"global","command":"/*\n--- Turn to Face ---\nSelect one or more tokens to be the turners. Target one token to be the target.\nWhenever the turner or the target move, the turner will rotate to face the target.\n(does not persist if you reload)\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/turn-to-face.js\nsuggested icon:\nhttps://i.imgur.com/HWWHd2W.png\n*/\n\nconst circle = 2 * Math.PI\nconst halfCircle = Math.PI\nconst toDegrees = 360 / circle\nconst hook_data_key = 'hook_id_for_turn_to_face'\n\nmain()\n\nfunction main() {\n  if (canvas.tokens.controlled.length === 0) {\n    return ui.notifications.error('You need to select at least one token to be the turner.')\n  }\n  // remove existing facing from\n  const detachedTokenNames = []\n  for (const turner of canvas.tokens.controlled) {\n    const existing_hook = turner.data[hook_data_key]\n    if (existing_hook !== undefined && existing_hook !== null) {\n      detachedTokenNames.push(turner.name)\n      Hooks.off('updateToken', existing_hook)\n      turner.update({[hook_data_key]: null})\n    }\n  }\n  if (detachedTokenNames.length > 0)\n    return ui.notifications.info(`Detached facing for: ${detachedTokenNames.join(', ')}`)\n\n  const target = Array.from(game.user.targets)[0]\n  if (target === undefined) {\n    return ui.notifications.error('You need to target one token.')\n  }\n  if (game.user.targets.size > 1) {\n    return ui.notifications.error('You cannot target more than one token.')\n  }\n\n  /**\n   * This function will make 'turner' turn towards 'target' once\n   */\n  const turn = (turner, target) => {\n    // angle is calculated between centers of tokens, using math\n    let rotationTowards = Math.atan2(target.center.y - turner.center.y, target.center.x - turner.center.x)\n    // adding 90° because JS and Foundry use different axes\n    rotationTowards += circle / 4\n    // adding 180° to make turner look towards the target instead of away\n    rotationTowards += halfCircle\n    // increasing/decreasing by 360° to make sure it's the closest rotation to the current one\n    const currentRotation = turner.icon.rotation\n    while (rotationTowards > currentRotation + halfCircle) rotationTowards -= circle\n    while (rotationTowards < currentRotation - halfCircle) rotationTowards += circle\n    // animation!\n    const maxDuration = 500\n    const duration = maxDuration * Math.abs(rotationTowards - currentRotation) / circle\n    // (locking to prevent refresh on hover)\n    turner.data.locked = true\n    CanvasAnimation.animateLinear(\n      [{parent: turner.icon, attribute: 'rotation', to: rotationTowards},],\n      {name: `Token.${turner.id}.turnToFace`, context: turner, duration: duration})\n      .then(() => {\n        // when animation is done we'll update the data\n        return turner.update({'rotation': rotationTowards * toDegrees})\n      })\n      .then(() => {\n        // (unlocking))\n        turner.data.locked = false\n      })\n  }\n\n  // setting up hooks for all turners, and also making them immediately turn to their target\n  for (const turner of canvas.tokens.controlled) {\n    if (target.id === turner.id) {\n      ui.notifications.error('A token cannot face itself!')\n      continue\n    }\n    const hook_id = Hooks.on('updateToken', async (scene, tok, updateData) => {\n      // hook should call turn() when the target or the turner move (change their X or Y)\n      if (!(\n        !!target.transform && !!turner.transform\n        && (tok._id === target.id || tok._id === turner.id)\n        && (updateData.x || updateData.y)\n      )) return\n      turn(turner, target)\n    })\n\n    turner.update({[hook_data_key]: hook_id})\n    turn(turner, target)\n  }\n}","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/HWWHd2W.png","actorIds":[]}
{"_id":"HMSiAFrTpDgy9ZEy","name":"Hide Names, Hide Bars","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.5PyB3iSsgNCOxxyM"}},"scope":"global","command":"/*\n--- Hide Names, Hide Bars ---\nFor all selected tokens, names will be hidden (except owner hover) and bars will be hidden.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/hide-names-hide-bars.js\nsuggested icon:\nhttps://i.imgur.com/R8klQVl.png\n*/\n\nmain()\n\nasync function main () {\n  // Update all selected tokens (yeah I know it's better to update them all at once than one by one but I'm lazy)\n  for (let token of canvas.tokens.controlled) {\n      await token.update({\n          displayBars: CONST.TOKEN_DISPLAY_MODES.NONE,\n          displayName: CONST.TOKEN_DISPLAY_MODES.OWNER_HOVER,\n      });\n  }\n}","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/R8klQVl.png","actorIds":[]}
{"_id":"INRaT3GqqQu0B9Pj","name":"Token Image Swap","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.QRj2AMWr8hvsv6fb"}},"scope":"global","command":"/*\n--- Token Image Swap ---\nChanges a selected token's image to the next one in a custom sequence. Can also change scale.\nHold Ctrl when executing the macro to set the images.\nHold Alt when executing the macro to switch to the previous image in the sequence, instead.\n\nWhen setting images, the format is:\n\n  [image_link] [scale]? # [comment]?\n\nscale is 1 by default, if omitted.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/token-image-swap.js\nsuggested icon:\nhttps://i.imgur.com/X2mAfEC.png\n*/\n\nconst SCOPE = 'world'\nconst KEY_OPTIONS = 'token-image-swap'\nconst KEY_CURRENT_INDEX = 'token-image-swap_index'\n\nmain()\n\nfunction main() {\n  const tok = canvas.tokens.controlled[0]\n  if (tok === undefined)\n    return ui.notifications.error('No token selected for Token Image Swap!')\n  const actor = tok.actor\n  if (!actor)\n    return ui.notifications.error('Cannot apply macro to tokens without an actor.')\n  if (game.keyboard._downKeys.has('Control')) return setupTokenImages(tok)\n  if (\n    actor.getFlag(SCOPE, KEY_OPTIONS) === undefined ||\n    actor.getFlag(SCOPE, KEY_OPTIONS).length === 0\n  )\n    return ui.notifications.error(\n      'Please hold the Ctrl key while activating this macro, to set up images.')\n  const imagesText = actor.data.flags[SCOPE][KEY_OPTIONS]\n  const options = imagesText.split('\\n')\n    .map(it => it.split('#')[0].trim())  // remove comments\n    .filter(it => it)  // remove empty lines\n  const optionImgs = options.map(it => it.split(' ')[0])\n  const optionScales = options\n    .map(it => it.split(' ')[1] || '1.0')\n    .map(it => parseFloat(it))\n  const currImg = tok.data.img\n  let imgIndex = actor.getFlag(SCOPE, KEY_CURRENT_INDEX) || 0  // || 0 is for backwards compatibility\n  if (!(0 <= imgIndex && imgIndex < options.length)) imgIndex = 0\n  const delta = game.keyboard._downKeys.has('Alt') ? -1 : +1\n  const nextIndex = (imgIndex + delta + options.length) % options.length\n  const nextImg = optionImgs[nextIndex]\n  const nextScale = optionScales[nextIndex]\n  tok.update({'img': nextImg, 'scale': nextScale})\n  tok.actor.setFlag(SCOPE, KEY_CURRENT_INDEX, nextIndex)\n}\n\nfunction setupTokenImages(tok) {\n  const actor = tok.actor\n  let existingUrlsValue = actor.getFlag(SCOPE, KEY_OPTIONS) || ''\n  if (existingUrlsValue && !existingUrlsValue.endsWith('\\n'))\n    existingUrlsValue += '\\n'\n  if (!existingUrlsValue.includes(tok.data.img)) {\n    // add current to list\n    existingUrlsValue += tok.data.img + ' ' + tok.data.scale + '   # ' + tok.name + '\\n'\n  }\n  const dialog = new Dialog({\n    title: `Token Image Swap - image list for ${actor.name}`,\n    content: `\n     <p>Please put image links here, each in a new line. You can add comments after URLs by adding \n     one or more spaces; for example, \"https://i.imgur.com/Ja8iNNg.png &nbsp;&nbsp;&nbsp;dragon form\".</p>\n      <div>\n       <textarea style=\"height: 250px\" id=\"urls-text\" name=\"urls\" autofocus=\"autofocus\">${existingUrlsValue}</textarea>\n      </div>\n     `,\n    buttons: {\n      one: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: 'Set images',\n        callback: (html) => {\n          const urlsText = html.find('#urls-text')[0].value\n          actor.setFlag(SCOPE, KEY_OPTIONS, urlsText)\n          if (actor.getFlag(SCOPE, KEY_CURRENT_INDEX) === undefined)\n            tok.actor.setFlag(SCOPE, KEY_CURRENT_INDEX, 0)\n          existingUrlsValue = urlsText\n          console.log(`Token Image Swap | setting image list for ${actor.name}: ${urlsText}`)\n        },\n      },\n      two: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: 'Cancel',\n        callback: () => {\n          console.log('Token Image Swap | canceled token image setup')\n        },\n      },\n    },\n    // NO DEFAULT - on purpose, to allow Enter key in text input\n    // default: 'one',\n  })\n  dialog.position.width = 500\n  dialog.render(true)\n}","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/X2mAfEC.png","actorIds":[]}
{"_id":"KkwknuSb58ry6RrM","name":"error","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.WCMyZfDWBURfR4p7"}},"scope":"global","command":"/*\n--- error ---\nDisplay an error message in the chat and console log. This is just a convenience method.\n\nargs:\n  0+ words, which will be concatenated. You should wrap them with \" if you're calling this via chat.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/error.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nlet message = args.join(' ') || '[no error message]'\n\nconsole.log('Error printed: ' + JSON.stringify(args))\n\nlet chatData = {\n  user: game.user._id,\n  speaker: ChatMessage.getSpeaker(),\n  content: 'Error: ' + message,\n}\nChatMessage.create(chatData, {})","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"QgbtgZzC9N52I3HG","name":"Setup Light/Vision","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.yeU9ybewhDsABwlL"}},"scope":"global","command":"/*\n--- Setup Light/Vision ---\nWill open two dialogs, for the user to set light and vision for the selected token.\n\ndepends on:\n  query-from-list\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/setup-light-and-vision.js\nsuggested icon:\nhttps://i.imgur.com/VfsnMXH.png\n*/\n\nconst VISION_OPTIONS = {\n  // <text>: [<brightSight>, <dimSight>]\n  'No change': null,\n  'None (1 ft)': [0, 1],\n  'Darkvision (30 ft)': [0, 30],\n  'Darkvision (60 ft)': [0, 60],\n  'Devil\\'s Sight (bright 120 ft)': [120, 0],\n}\n\nconst LIGHT_OPTIONS = {\n  // <text>: [<brightLight>, <dimLight>]\n  'No change': null,\n  'None': [0, 0],\n  'Candle': [5, 10],\n  'Torch or Light cantrip': [20, 40],\n  'Lantern - Hooded, dim': [0, 5],\n  'Lantern - Hooded, bright': [30, 60],\n}\n\nconst getDependency = async (entityMap, packName, entityName) => {\n  const existingEntity = entityMap.entities.find(t => t.name === entityName)\n  if (existingEntity) return existingEntity\n  const pack = game.packs.find(p => p.title === packName)\n  const index = await pack.getIndex()\n  const inIndex = index.find(it => it.name === entityName)\n  return inIndex ? pack.getEntity(inIndex._id) : null\n}\n\nconst runMacro = async (macroName, ...args) => {\n  const macro = (await getDependency(game.macros, 'itamacros', macroName))\n  if (macro === null) return ui.notifications.error(\n    `can't find macro: \"${macroName}\"`)\n  return macro.renderContent(...args)\n}\n\nconst setVision = (visionStr) => {\n  const vision = VISION_OPTIONS[visionStr]\n  if (!vision)\n    return\n  const [bright, dim] = vision\n  for (const token of canvas.tokens.controlled) {\n    token.update({\n      vision: true,\n      dimSight: dim,\n      brightSight: bright,\n    })\n  }\n}\n\nconst setLight = (lightStr) => {\n  const light = LIGHT_OPTIONS[lightStr]\n  if (!light)\n    return\n  const [bright, dim] = light\n  for (const token of canvas.tokens.controlled) {\n    token.update({\n      dimLight: dim,\n      brightLight: bright,\n    })\n  }\n}\n\nconst selectedTokenNames = canvas.tokens.controlled.map(\n  (it) => {return it.name}).join(', ')\n\nrunMacro('query-from-list',\n  'Selected tokens: ' + selectedTokenNames,\n  'Vision:',\n  setVision,\n  ...Object.keys(VISION_OPTIONS),\n)\n\nrunMacro('query-from-list',\n  'Selected tokens: ' + selectedTokenNames,\n  'Light:',\n  setLight,\n  ...Object.keys(LIGHT_OPTIONS),\n)","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/VfsnMXH.png","actorIds":[]}
{"_id":"UJTUObfMJ5wPfpyb","name":"Swap Positions","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.2QuZoKiUbqDGMXKE"}},"scope":"global","command":"/*\n--- Swap Positions ---\nSwap two selected tokens (use Shift for the multiselection)\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/swap-positions.js\nsuggested icon:\nhttps://static.thenounproject.com/png/232484-200.png\n*/\n\nmain()\n\nasync function main () {\n  const tokens = canvas.tokens.controlled\n  if (tokens.length !== 2) {\n    ui.notifications.warn('Please select exactly 2 tokens.', {})\n    return\n  }\n\n  const updates = [\n    {\n      _id: tokens[0].data._id,\n      x: tokens[1].data.x,\n      y: tokens[1].data.y,\n    },\n    {\n      _id: tokens[1].data._id,\n      x: tokens[0].data.x,\n      y: tokens[0].data.y,\n    },\n  ]\n\n  await canvas.scene.updateEmbeddedEntity('Token', updates)\n}","author":"chBZeKgbHJ17qeha","img":"https://static.thenounproject.com/png/232484-200.png","actorIds":[]}
{"_id":"WjeYm24woPPco93y","name":"Crit Fail","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.N8cQIrxqITsnURs2"}},"scope":"global","command":"/*\n--- critfail ---\nRolls and shows a result from the Critical Fail table (required as a rollable table)\n\ndepends on:\n  make-table-result-bold\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/critfail.js\nsuggested icon:\nhttps://i.imgur.com/huPpJQf.png\n*/\n\nconst getDependency = async (entityMap, packName, entityName) => {\n  const existingEntity = entityMap.entities.find(t => t.name === entityName)\n  if (existingEntity) return existingEntity\n  const pack = game.packs.find(p => p.title === packName)\n  const index = await pack.getIndex()\n  const inIndex = index.find(it => it.name === entityName)\n  return inIndex ? pack.getEntity(inIndex._id) : null\n}\n\nconst runMacro = async (macroName, ...args) => {\n  const macro = (await getDependency(game.macros, 'itamacros', macroName))\n  if (macro === null) return ui.notifications.error(`can't find macro: \"${macroName}\"`)\n  return macro.renderContent(...args)\n}\n\nconst table = await getDependency(game.tables, 'Critical Hits', 'Critical Fail')\nconst roll = table.roll()\nconst rollPart = roll.roll\nconst resultPart = Object.assign({}, roll.results[0]) // copy, otherwise we edit original table! :O\nresultPart.text = await runMacro('make-table-result-bold', resultPart.text)\n\ntable.draw({ roll: rollPart, results: [resultPart] })","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/huPpJQf.png","actorIds":[]}
{"_id":"aX95JeHvWMf9t2z8","name":"Clear Conditions","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.aSNWccVxCl8Gc1c7"}},"scope":"global","command":"/*\n--- Clear Conditions ---\nClear all conditions from all selected tokens.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/clear-conditions.js\nsuggested icon:\nhttps://game-icons.net/icons/ffffff/000000/1x1/delapouite/broom.svg\n*/\n\nmain()\n\nasync function main () {\n  for (const token of canvas.tokens.controlled) {\n    await token.update({ 'effects': [], 'overlayEffect': '' })\n  }\n}","author":"chBZeKgbHJ17qeha","img":"https://game-icons.net/icons/ffffff/000000/1x1/delapouite/broom.svg","actorIds":[]}
{"_id":"arnSfrqYZZ2y8Oer","name":"Delete Measurements","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.45fe9NmnMoakxSUX"}},"scope":"global","command":"/*\n--- Delete Measurements ---\nDeletes all template measurements on the map (e.g. if you want to remove all visual spell areas).\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/delete-measurements.js\nsuggested icon:\nhttps://game-icons.net/icons/ffffff/000000/1x1/delapouite/broom.svg\n*/\n\ncanvas.templates.deleteAll()","author":"chBZeKgbHJ17qeha","img":"https://game-icons.net/icons/ffffff/000000/1x1/delapouite/broom.svg","actorIds":[]}
{"_id":"c8EYoaKHhxjBPLUe","name":"Show Artwork","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.maMMjMoRsw94vts1"}},"scope":"global","command":"/*\n--- Show Artwork ---\nShow artwork of selected token to yourself (GM can show to all players).\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/show-artwork.js\nsuggested icon:\nhttps://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/openmoji/252/framed-picture_1f5bc.png\n*/\n\nmain()\n\nfunction main () {\n  const tok = canvas.tokens.controlled[0] || Array.from(game.user.targets)[0]\n  if (tok === undefined)\n    return ui.notifications.warn('Please select token first.')\n  let tActor = tok.actor\n  new ImagePopout(tActor.data.img, {\n    title: tActor.name,\n    shareable: true,\n    uuid: tActor.uuid,\n  }).render(true)\n}","author":"chBZeKgbHJ17qeha","img":"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/openmoji/252/framed-picture_1f5bc.png","actorIds":[]}
{"_id":"fFxoHp0UZbRe8WKO","name":"Turn Selected Towards Cursor","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.xStn6Qd564KKaiIk"}},"scope":"global","command":"/*\n--- Turn Selected Towards Cursor ---\nCauses all selected tokens to rotate towards the cursor\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/turn-selected-towards-cursor.js\nsuggested icon:\nhttps://game-icons.net/icons/ffffff/000000/1x1/delapouite/look-at.svg\n */\n\nconst mouse = canvas.app.renderer.plugins.interaction.mouse\nconst m = mouse.getLocalPosition(canvas.app.stage)\n\nconst changes = canvas.tokens.controlled.map(t => {\n  const c = t.center\n  let rotation = (Math.atan2(m.y - c.y, m.x - c.x) * 180 / Math.PI + 180) % 360\n  rotation = (rotation + 90) % 360  // down = 0\n  return {t, rotation}\n})\n\n// update preview\nchanges.forEach(x => {\n  const {t, rotation} = x\n  let newRotation = rotation * Math.PI / 180\n  const currentRotation = t.icon.rotation\n  while (newRotation > currentRotation + Math.PI) newRotation -= 2 * Math.PI\n  while (newRotation < currentRotation - Math.PI) newRotation += 2 * Math.PI\n  const duration = Math.abs(newRotation - currentRotation) / Math.PI * 300\n  t.data.locked = true\n  CanvasAnimation.animateLinear([\n    {parent: t.icon, attribute: 'rotation', to: newRotation},\n//        {parent: t.data, attribute: 'rotation', to: newRotation},\n  ], {name: `Token.${t.id}.animateRotationTowardsPoint`, context: t.icon, duration: duration}).then(() => {\n    return t.update({'rotation': rotation})\n  }).then(() => {\n    // we locked this to prevent refresh on hover\n    t.data.locked = false\n  })\n})","author":"chBZeKgbHJ17qeha","img":"https://game-icons.net/icons/ffffff/000000/1x1/delapouite/look-at.svg","actorIds":[]}
{"_id":"ixTZJbVE8j0gOvj3","name":"crit","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Rz53sXI0uHqexwXi"}},"scope":"global","command":"/*\n--- crit ---\nRolls a crit from one of the expanded critical tables (required as Rollable Tables with those names)\n\nargs:\n  0 - one of the damage types, plus \"Insanity\", \"Minor Injury\", \"Major Injury\", \"Critical Fumble\"\n\ndepends on:\n  critfail\n  error\n  make-table-result-bold\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/crit.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nconst input0 = args[0] || 'undefined'\nlet input = input0.toLowerCase().trim()\n\nconst CRIT_TYPES = [\n  'Bludgeoning',\n  'Piercing',\n  'Slashing',\n  'Fire',\n  'Acid',\n  'Cold',\n  'Force',\n  'Poison',\n  'Lightning',\n  'Necrotic',\n  'Psychic',\n  'Thunder',\n  'Radiant',\n  'Insanity',\n  'Minor Injury',\n  'Major Injury',\n  'Critical Fumble',\n  'Failure',\n]\n\nconst getDependency = async (entityMap, packName, entityName) => {\n  const existingEntity = entityMap.entities.find(t => t.name === entityName)\n  if (existingEntity) return existingEntity\n  const pack = game.packs.find(p => p.title === packName)\n  const index = await pack.getIndex()\n  const inIndex = index.find(it => it.name === entityName)\n  return inIndex ? pack.getEntity(inIndex._id) : null\n}\n\nconst runMacro = async (macroName, ...args) => {\n  const macro = (await getDependency(game.macros, 'itamacros', macroName))\n  if (macro === null) return ui.notifications.error(`can't find macro: \"${macroName}\"`)\n  return macro.renderContent(...args)\n}\n\nlet critType = null\nfor (const crit of CRIT_TYPES) {\n  if (crit.toLowerCase().includes(input)) {\n    critType = crit\n    break\n  }\n}\n\nif (critType === null)\n  return runMacro('error', `You should pick a crit type from: ${CRIT_TYPES.join(', ')}`)\n\nif (critType === 'Failure' || critType === 'Critical Fumble')\n  return runMacro('critfail')\n\nconst table = await getDependency(game.tables, 'Critical Hits', critType)\nif (!table) {\n  return runMacro('error', `Failed using ${input} crit - make sure you have the Critical Hits compendium`)\n}\n\nconst roll = table.roll()\nconst rollPart = roll.roll\nconst resultPart = Object.assign({}, roll.results[0]) // copy, otherwise we edit original table! :O\nresultPart.text = await runMacro('make-table-result-bold', resultPart.text)\n\ntable.draw({roll: rollPart, results: [resultPart]})","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"nruzYkTwWNQkY1nb","name":"Spend Hit Die","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.lAFXUMsh57hsQ41s"}},"scope":"global","command":"/*\n--- Spend Hit Die (5e) ---\nThis will spend your highest remaining hit die, rolling it and showing the result in the chat (not adding Constitution).\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/spend-hit-die.js\nsuggested icon:\nhttps://reprog.files.wordpress.com/2011/01/1d8.png\n */\n\nconst classes = actor.data.items.filter(it => { return it.type === 'class' })\nlet best = null\nclasses.forEach(it => {\n  const diceData = {\n    classItem: it,\n    diceUsed: it.data.hitDiceUsed,\n    diceRemaining: it.data.levels - it.data.hitDiceUsed,\n    diceSize: parseInt(it.data.hitDice.substring(1)),\n  }\n  if (diceData.diceRemaining > 0 && (best === null || diceData.diceSize > best.diceSize)) {\n    best = diceData\n  }\n})\n\nif (best === null) {\n  ui.notifications.error(`${actor.name} has no remaining hit dice!`)\n  return\n}\n\nactor.items.get(best.classItem._id).update({ 'data.hitDiceUsed': best.diceUsed + 1 })\nconst roll = new Roll('1d' + best.diceSize)\nroll.roll()\nawait ChatMessage.create({\n  speaker: ChatMessage.getSpeaker({ actor }),\n  content: `${actor.name} spends a <b>${best.classItem.name}</b> hit die.\\nRemaining: ${best.diceRemaining - 1}/${best.classItem.data.levels}.`,\n})\nawait roll.toMessage()","author":"chBZeKgbHJ17qeha","img":"https://reprog.files.wordpress.com/2011/01/1d8.png","actorIds":[]}
{"_id":"oSPcvwfozJsgc3Xk","name":"Flip","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.4EObNpnrlDWUAazU"}},"scope":"global","command":"/*\n--- Flip ---\nFlips the selected token image along the X axis.\nYou can edit this to flip across the Y axis by replacing mirrorX with mirrorY.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/flip.js\nsuggested icon:\nhttps://emojiguide.org/images/emoji/1/w8iuxo1l9in91.png\n */\n\nfor (const token of canvas.tokens.controlled) {\n  const flip = !token.data.mirrorX || false\n  token.update({ mirrorX: flip })\n}","author":"chBZeKgbHJ17qeha","img":"https://emojiguide.org/images/emoji/1/w8iuxo1l9in91.png","actorIds":[]}
{"_id":"tK0c90l8ibOcej4z","name":"make-table-result-bold","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.76nqkr3DYAg9gMLj"}},"scope":"global","command":"/*\n--- make-table-result-bold ---\nConverts text from crit tables to make the first sentence bold\n\nargs:\n  0 - text to make bold\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/make-table-result-bold.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nlet text = args[0]\nif (text === null || text === undefined) {\n  ui.notifications.error(`make-table-result-bold should have an argument!`)\n  return ''\n}\nconst periodIndex = text.search(/[.!?]/g)\nif (periodIndex === -1)\n  return '<b>(!)</b>' + text\nconst titleText = text.substring(0, periodIndex + 1)\nconst restOfText = text.substring(periodIndex + 1)\nreturn `<b>${titleText}</b>${restOfText}`","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"wA4SOoTGn77eX5Zu","name":"i","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.wJs5wSgPrrOKwCCV"}},"scope":"global","command":"/*\n--- i ---\nAllows using /i to type italics text.\n\nargs:\n  0+ words, which will be concatenated. You should wrap them with \" if you're calling this via chat.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/i.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nconst text = args.join(' ')\nreturn `<i>${text}</i>`","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"xyF7YmmwY6RlYOWJ","name":"Filter Macros","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.OLlm7ob8hWKNQdsQ"}},"scope":"global","command":"/*\n--- Filter Macros ---\nFilters macro directory to only show macros from a certain author (edit this macro with author name).\nActivate this with macro directory open.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/filter-macros.js\nsuggested icon:\nhttps://game-icons.net/icons/ffffff/000000/1x1/delapouite/funnel.svg\n*/\n\nconst authorName = 'INSERT_PLAYER_NAME_HERE'\n\n$('#macros > ol')\n  .children()\n  .filter((i, listItem) => {\n    const macro = game.macros.get(listItem.getAttribute('data-entity-id'))\n    const author = game.users.get(macro.data.author)\n    return author.name !== authorName\n  })\n  .remove()","author":"chBZeKgbHJ17qeha","img":"https://game-icons.net/icons/ffffff/000000/1x1/delapouite/funnel.svg","actorIds":[]}
{"_id":"yq9Zynv2Cwd3ygxi","name":"anime-attack","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Nxfa0Ka84p4WNQq4"}},"scope":"global","command":"/*\n--- Anime Attack ---\nWill rename the next ability into a cool anime attack.\nActivate this right before rolling a spell/item/feature.\nThis comes with prepared image lists, so it will also change the ability icon,\nbut you can just remove that part of the code if you don't need that.\n\nYou can also use something like BetterRolls to create a simple macro!\nfor example, this is my macro for unarmed strikes:\n\n    game.macros.getName('anime-attack').renderContent(1)\n    BetterRolls.quickRollById(\"X5imh1VGNcYYAzPP\", \"IKxYgPrDJj737hQt\")\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/anime-attack.js\nsuggested icon:\nhttps://i.imgur.com/YptofqA.png\n*/\n\n// Anime attack type template number. Set this if you want just one of the options.\n// examples:\n// 1 - Armageddon Barrage\n// 2 - Majestic Lion Burst\n// 3 - Watchful Shark, Splitting Jackal\n// 4 - Whirling Crush of Darling Star\nconst ANIME_ATTACK_TYPE = (args && parseInt(args[0]))\n\nfunction animeImageGen () {\n  const type = ANIME_ATTACK_TYPE || pick([1, 2])\n  if (type === 1) {\n    // unarmed strike, low damage\n    return pick([\n      'systems/dnd5e/icons/skills/fire_07.jpg', // fist\n      'systems/dnd5e/icons/skills/yellow_08.jpg', // fist\n      'systems/dnd5e/icons/skills/yellow_17.jpg', // headbutt?\n      'https://i.imgur.com/Pxu0IdR.png', // kick\n      'https://i.imgur.com/b4DKm4z.png', // flying kick\n      'https://i.imgur.com/xS7HhZN.png', // uppercut\n    ])\n  } else if (type === 2) {\n    // quarterstaff attack, medium damage\n    return pick([\n      'systems/dnd5e/icons/skills/blue_23.jpg', // quarterstaff\n      'systems/dnd5e/icons/skills/red_05.jpg', // quarterstaff\n      'https://i.imgur.com/Dm7jb2E.png', // red swipe thing\n    ])\n  }\n  return null\n}\n\n// NAME GENERATOR SOURCE: https://www.fantasynamegenerators.com/anime-attack-names.php\nconst nm1=[\"Abominable\",\"Aching\",\"Adamantine\",\"Adept\",\"Advanced\",\"Aggressive\",\"Agile\",\"Agonizing\",\"Amplified\",\"Ancient\",\"Angelic\",\"Angry\",\"Arch\",\"Azure\",\"Basic\",\"Black\",\"Blinding\",\"Bright\",\"Brilliant\",\"Brutal\",\"Burning\",\"Careless\",\"Chaotic\",\"Chief\",\"Classic\",\"Clean\",\"Colossal\",\"Combination\",\"Complete\",\"Complex\",\"Composed\",\"Confusing\",\"Corrupt\",\"Counter\",\"Courageous\",\"Crazed\",\"Crazy\",\"Crimson\",\"Cruel\",\"Crushing\",\"Dancing\",\"Dark\",\"Dead\",\"Deadly\",\"Defensive\",\"Defiant\",\"Definitive\",\"Delayed\",\"Delirious\",\"Demonic\",\"Devouring\",\"Dieing\",\"Diligent\",\"Direct\",\"Dirty\",\"Double\",\"Draconic\",\"Drunken\",\"Dual\",\"Dynamic\",\"Eager\",\"Elegant\",\"Elementary\",\"Enchanted\",\"Enchanting\",\"Enlightened\",\"Enraged\",\"Executing\",\"Expert\",\"Extreme\",\"Fading\",\"Faint\",\"Fake\",\"Falling\",\"False\",\"Fatal\",\"Fearless\",\"Feral\",\"Firm\",\"First\",\"Flawless\",\"Flowing\",\"Flying\",\"Focused\",\"Forbidden\",\"Forsaken\",\"Frozen\",\"Furious\",\"Giant\",\"Gigantic\",\"Gilded\",\"Glaring\",\"Golden\",\"Graceful\",\"Grand\",\"Grave\",\"Greater\",\"Grim\",\"Hallowed\",\"Haunting\",\"Hidden\",\"High\",\"Hollow\",\"Holy\",\"Honored\",\"Humming\",\"Hungry\",\"Identical\",\"Impending\",\"Impossible\",\"Impure\",\"Infinite\",\"Iron\",\"Leaping\",\"Light\",\"Living\",\"Lucky\",\"Majestic\",\"Major\",\"Minor\",\"Misty\",\"Mithril\",\"Mixed\",\"Monstrous\",\"Mortal\",\"Mysterious\",\"Nimble\",\"Numbing\",\"Obsidian\",\"Parallel\",\"Perfect\",\"Powerful\",\"Primal\",\"Primary\",\"Prime\",\"Pristine\",\"Puny\",\"Pure\",\"Quick\",\"Quiet\",\"Rabid\",\"Ragged\",\"Rapid\",\"Raw\",\"Reckless\",\"Reflecting\",\"Regal\",\"Rotten\",\"Rough\",\"Royal\",\"Sadistic\",\"Savage\",\"Scarlet\",\"Scathing\",\"Sealed\",\"Secret\",\"Serene\",\"Severing\",\"Shallow\",\"Shameless\",\"Shining\",\"Shocking\",\"Silent\",\"Silver\",\"Simple\",\"Single\",\"Skeletal\",\"Slaying\",\"Smooth\",\"Sneaky\",\"Straight\",\"Steel\",\"Stunning\",\"Subtle\",\"Super\",\"Superior\",\"Surging\",\"Surprise\",\"Swift\",\"Thundering\",\"Timeless\",\"True\",\"Twin\",\"Unholy\",\"Unleashed\",\"Vacuum\",\"Vengeful\",\"Vicious\",\"Vile\",\"Violent\",\"Violet\",\"Warped\",\"Weeping\",\"Whispered\",\"White\",\"Wicked\",\"Wild\",\"Winding\",\"Wise\",\"Wretched\"];\nconst nm2=[\"Angel\",\"Annihilation\",\"Arachnid\",\"Armageddon\",\"Ash\",\"Assassin\",\"Aura\",\"Autumn\",\"Avalanche\",\"Bane\",\"Barrier\",\"Bear\",\"Beast\",\"Behemoth\",\"Bird\",\"Blessing\",\"Blizzard\",\"Blood\",\"Blossom\",\"Body\",\"Bomb\",\"Bone\",\"Boulder\",\"Bubble\",\"Bug\",\"Butterfly\",\"Camouflage\",\"Canine\",\"Chain\",\"Chakra\",\"Chaos\",\"Claw\",\"Clone\",\"Cloud\",\"Cocoon\",\"Cold\",\"Comet\",\"Cosmos\",\"Crab\",\"Crane\",\"Crescent\",\"Cricket\",\"Crystal\",\"Darkness\",\"Day\",\"Daydream\",\"Death\",\"Deception\",\"Delusion\",\"Demon\",\"Diamond\",\"Dragon\",\"Dragonfly\",\"Dream\",\"Droplet\",\"Dust\",\"Earth\",\"Earthquake\",\"Echo\",\"Electric\",\"Elemental\",\"Elephant\",\"Enigma\",\"Execution\",\"Exorcism\",\"Explosion\",\"Falcon\",\"Fang\",\"Feather\",\"Feline\",\"Fire\",\"Flame\",\"Frost\",\"Frostfire\",\"Fury\",\"Ghost\",\"Giant\",\"God\",\"Golem\",\"Gravity\",\"Hawk\",\"Head\",\"Heaven\",\"Hell\",\"Hellfire\",\"Hornet\",\"Horror\",\"Hot\",\"Hurricane\",\"Ice\",\"Illusion\",\"Impact\",\"Inferno\",\"Infinity\",\"Instant\",\"Jaw\",\"Judgment\",\"Ki\",\"Lava\",\"Leaf\",\"Leech\",\"Legend\",\"Light\",\"Lightning\",\"Lily\",\"Limbo\",\"Lion\",\"Lotus\",\"Magma\",\"Mania\",\"Maple\",\"Melting\",\"Meteor\",\"Mime\",\"Mind\",\"Mirror\",\"Mist\",\"Monkey\",\"Moon\",\"Moonlight\",\"Mountain\",\"Needle\",\"Night\",\"Nightmare\",\"Nova\",\"Oak\",\"Oracle\",\"Palm\",\"Panther\",\"Paragon\",\"Paralysis\",\"Petal\",\"Phantom\",\"Phoenix\",\"Poison\",\"Prism\",\"Prison\",\"Propulsion\",\"Puppet\",\"Quick\",\"Rage\",\"Rain\",\"Rainbow\",\"Retribution\",\"Reverse\",\"River\",\"Rock\",\"Sand\",\"Scorpion\",\"Secret\",\"Serpent\",\"Shadow\",\"Shark\",\"Skeleton\",\"Sky\",\"Smoke\",\"Snake\",\"Snow\",\"Soul\",\"Spider\",\"Spiral\",\"Spirit\",\"Spring\",\"Starfall\",\"Starlight\",\"Stealth\",\"Stone\",\"Storm\",\"Summer\",\"Sun\",\"Sunlight\",\"Supreme\",\"Talon\",\"Teardrop\",\"Terror\",\"Thorn\",\"Thunder\",\"Tiger\",\"Tornado\",\"Toxin\",\"Tree\",\"Turtle\",\"Twin\",\"Typhoon\",\"Vapor\",\"Vengeance\",\"Venom\",\"Void\",\"Vortex\",\"Water\",\"Waterfall\",\"Whirlwind\",\"Wild\",\"Willow\",\"Wind\",\"Wing\",\"Winter\",\"Wolf\",\"Yang\",\"Yin\"];\nconst nm3=[\"Ambush\",\"Assault\",\"Attack\",\"Barrage\",\"Bash\",\"Binding\",\"Bite\",\"Blade\",\"Blast\",\"Blitz\",\"Blow\",\"Bolt\",\"Bullet\",\"Burst\",\"Bust\",\"Cannon\",\"Chain\",\"Charge\",\"Chop\",\"Clap\",\"Claw\",\"Coil\",\"Crack\",\"Crush\",\"Cut\",\"Dance\",\"Dive\",\"Drain\",\"Eruption\",\"Fall\",\"Fang\",\"Fist\",\"Fists\",\"Flash\",\"Flush\",\"Force\",\"Fracture\",\"Hit\",\"Hurl\",\"Impact\",\"Jolt\",\"Kick\",\"Kiss\",\"Knock\",\"Launch\",\"Method\",\"Pound\",\"Punch\",\"Push\",\"Raze\",\"Release\",\"Rush\",\"Seal\",\"Shatter\",\"Shock\",\"Shot\",\"Slam\",\"Slash\",\"Smash\",\"Spear\",\"Spell\",\"Stab\",\"Stomp\",\"Strike\",\"Surge\",\"Technique\",\"Thrust\",\"Trap\",\"Trash\",\"Volley\",\"Wave\",\"Whip\"];\nconst nm4=[\"Admired\",\"Adored\",\"Advanced\",\"Aether\",\"Alert\",\"Anchored\",\"Ancient\",\"Angelic\",\"Arctic\",\"Aromatic\",\"Authentic\",\"Autumn\",\"Beautiful\",\"Beloved\",\"Bitter\",\"Bleak\",\"Blind\",\"Blissful\",\"Bold\",\"Bright\",\"Brilliant\",\"Broken\",\"Bronze\",\"Calm\",\"Careful\",\"Careless\",\"Clouded\",\"Colossal\",\"Common\",\"Composed\",\"Corrupt\",\"Crescent\",\"Cruel\",\"Damaged\",\"Dapper\",\"Darling\",\"Dearest\",\"Defensive\",\"Demise\",\"Demonic\",\"Dependable\",\"Determined\",\"Devoted\",\"Diligent\",\"Dual\",\"Dutiful\",\"Eager\",\"Earnest\",\"Echo\",\"Eclipse\",\"Elegant\",\"Enchanted\",\"Enigma\",\"Esteemed\",\"Everlasting\",\"Evil\",\"Exalted\",\"False\",\"Fatal\",\"Fearless\",\"Flawless\",\"Focused\",\"Forceful\",\"Forsaken\",\"Fortunate\",\"Gentle\",\"Giant\",\"Gigantic\",\"Glacier\",\"Glorious\",\"Golden\",\"Graceful\",\"Grand\",\"Grave\",\"Gravity\",\"Grim\",\"Hallowed\",\"Harmonic\",\"Harmonious\",\"Haunting\",\"Heaven\",\"Heavenly\",\"Hell\",\"Hibernating\",\"Hidden\",\"Hollow\",\"Honored\",\"Horizon\",\"Humble\",\"Hungry\",\"Illusion\",\"Imitation\",\"Immortal\",\"Juvenile\",\"Kings\",\"Last\",\"Legend\",\"Light\",\"Living\",\"Lone\",\"Lonely\",\"Lost\",\"Loyal\",\"Lucky\",\"Lunar\",\"Majestic\",\"Menacing\",\"Mild\",\"Mysterious\",\"Nimble\",\"Outlandish\",\"Parallel\",\"Parasitic\",\"Peaceful\",\"Perfect\",\"Poison\",\"Powerful\",\"Prestigious\",\"Prime\",\"Prism\",\"Prison\",\"Proud\",\"Quick\",\"Quiet\",\"Radiant\",\"Rainbow\",\"Regal\",\"Royal\",\"Secret\",\"Serene\",\"Shadow\",\"Silent\",\"Skeletal\",\"Solar\",\"Spiteful\",\"Spring\",\"Stark\",\"Summer\",\"Swift\",\"Toxin\",\"True\",\"Twilight\",\"Twin\",\"Vengeful\",\"Venom\",\"Void\",\"Vortex\",\"Watchful\",\"Weather\",\"Wicked\",\"Wild\",\"Winter\",\"Wise\",\"Worthy\",\"Wretched\",\"Zealous\"];\nconst nm5=[\"Alligator\",\"Anaconda\",\"Angel\",\"Ape\",\"Armadillo\",\"Assassin\",\"Aura\",\"Axe\",\"Baboon\",\"Badger\",\"Bandicoot\",\"Basilisk\",\"Bear\",\"Beast\",\"Beaver\",\"Bee\",\"Beetle\",\"Behemoth\",\"Bird\",\"Blade\",\"Blood\",\"Blossom\",\"Boa\",\"Boar\",\"Body\",\"Bolt\",\"Branch\",\"Brook\",\"Buffalo\",\"Bug\",\"Butterfly\",\"Cat\",\"Chain\",\"Chameleon\",\"Chimp\",\"Claw\",\"Clone\",\"Cloud\",\"Cobra\",\"Cocoon\",\"Comet\",\"Condor\",\"Cougar\",\"Crab\",\"Crane\",\"Cricket\",\"Crocodile\",\"Crow\",\"Deer\",\"Demon\",\"Dove\",\"Dragon\",\"Dragonfly\",\"Eagle\",\"Edge\",\"Elephant\",\"Falcon\",\"Fang\",\"Feather\",\"Firefly\",\"Fish\",\"Flame\",\"Fog\",\"Forest\",\"Fox\",\"Frog\",\"Ghost\",\"Giant\",\"Goat\",\"God\",\"Golem\",\"Gorilla\",\"Grass\",\"Hare\",\"Hawk\",\"Head\",\"Hippo\",\"Hook\",\"Hornet\",\"Horse\",\"Hyena\",\"Ice\",\"Jackal\",\"Jaguar\",\"Katana\",\"Leaf\",\"Leech\",\"Lemur\",\"Light\",\"Lightning\",\"Lily\",\"Lizard\",\"Locust\",\"Lotus\",\"Lynx\",\"Macaw\",\"Magpie\",\"Mandrill\",\"Mantis\",\"Meteor\",\"Mime\",\"Mind\",\"Mist\",\"Monkey\",\"Moon\",\"Moose\",\"Mountain\",\"Mouse\",\"Mushroom\",\"Needle\",\"Night\",\"Nightingale\",\"Octopus\",\"Oracle\",\"Panda\",\"Panther\",\"Paragon\",\"Petal\",\"Phantom\",\"Phoenix\",\"Puppet\",\"Raccoon\",\"Rain\",\"Ram\",\"Rat\",\"Raven\",\"Rhino\",\"Rock\",\"Root\",\"Rose\",\"Salamander\",\"Scorpion\",\"Shark\",\"Shield\",\"Smoke\",\"Snake\",\"Snow\",\"Spear\",\"Spider\",\"Spirit\",\"Star\",\"Sun\",\"Swallow\",\"Swan\",\"Sword\",\"Tiger\",\"Titan\",\"Toad\",\"Tortoise\",\"Tree\",\"Turtle\",\"Viper\",\"Vulture\",\"Wasp\",\"Water\",\"Wolf\",\"Wolverine\",\"World\"];\nconst nm6=[\"Accelerating\",\"Activating\",\"Adapting\",\"Alighting\",\"Anticipating\",\"Arising\",\"Assembling\",\"Attaching\",\"Attacking\",\"Balancing\",\"Battling\",\"Beating\",\"Bending\",\"Binding\",\"Biting\",\"Bleeding\",\"Blessing\",\"Blinding\",\"Blowing\",\"Boiling\",\"Bolting\",\"Bouncing\",\"Breaking\",\"Breathing\",\"Burning\",\"Bursting\",\"Carving\",\"Casting\",\"Catching\",\"Changing\",\"Charging\",\"Chasing\",\"Cheating\",\"Chopping\",\"Clinging\",\"Coiling\",\"Coming\",\"Commanding\",\"Confusing\",\"Constructing\",\"Containing\",\"Contracting\",\"Controlling\",\"Copying\",\"Cracking\",\"Crashing\",\"Crawling\",\"Crossing\",\"Crushing\",\"Crying\",\"Curving\",\"Cutting\",\"Dancing\",\"Deceiving\",\"Destroying\",\"Directing\",\"Diverting\",\"Dividing\",\"Diving\",\"Doubling\",\"Draining\",\"Dreaming\",\"Drinking\",\"Drowning\",\"Drumming\",\"Eating\",\"Eliminating\",\"Ending\",\"Enduring\",\"Enforcing\",\"Enhancing\",\"Escaping\",\"Expanding\",\"Exploding\",\"Extending\",\"Extracting\",\"Fading\",\"Fearing\",\"Feeding\",\"Fetching\",\"Fighting\",\"Firing\",\"Flowing\",\"Flying\",\"Forcing\",\"Freezing\",\"Frightening\",\"Frying\",\"Glowing\",\"Grabbing\",\"Grinding\",\"Gripping\",\"Growing\",\"Guarding\",\"Harming\",\"Hating\",\"Hiding\",\"Hovering\",\"Hurting\",\"Hypnotizing\",\"Injecting\",\"Injuring\",\"Intensifying\",\"Interrupting\",\"Jesting\",\"Judging\",\"Kicking\",\"Killing\",\"Knocking\",\"Laughing\",\"Launching\",\"Leaping\",\"Living\",\"Melting\",\"Misleading\",\"Mixing\",\"Multiplying\",\"Obeying\",\"Overflowing\",\"Perfecting\",\"Pinching\",\"Planting\",\"Possessing\",\"Praying\",\"Pretending\",\"Preying\",\"Protecting\",\"Punching\",\"Puncturing\",\"Punishing\",\"Radiating\",\"Raging\",\"Raining\",\"Reducing\",\"Reflecting\",\"Reigning\",\"Releasing\",\"Removing\",\"Repeating\",\"Revealing\",\"Riding\",\"Ruining\",\"Ruling\",\"Running\",\"Rushing\",\"Saving\",\"Scattering\",\"Scorching\",\"Scratching\",\"Screaming\",\"Shining\",\"Shocking\",\"Shooting\",\"Singing\",\"Sinning\",\"Slaying\",\"Sleeping\",\"Smashing\",\"Smiting\",\"Sneaking\",\"Spinning\",\"Splitting\",\"Stinging\",\"Striking\",\"Suffering\",\"Tearing\",\"Thrusting\",\"Transforming\",\"Twisting\",\"Vanishing\",\"Wandering\",\"Watching\",\"Whirling\",\"Whistling\"];\n\nfunction pick (arr) {\n  return arr[Math.floor(Math.random() * arr.length)]\n}\n\nfunction animeAttackNameGen () {\n  const type = ANIME_ATTACK_TYPE || pick([1, 2, 3, 4])\n  if (type === 1) {\n    // Armageddon Barrage\n    return pick(nm2) + ' ' + pick(nm3)\n  } else if (type === 2) {\n    // Majestic Lion Burst\n    return pick(nm1) + ' ' + pick(nm2) + ' ' + pick(nm3)\n  } else if (type === 3) {\n    // Watchful Shark, Splitting Jackal\n    const rnd1 = pick(nm4), rnd2 = pick(nm5)\n    let rnd3 = pick(nm6), rnd4 = pick(nm5)\n    while (rnd2 === rnd4) rnd4 = pick(nm5)\n    while (rnd1 === rnd3) rnd4 = pick(nm5)\n    return rnd1 + ' ' + rnd2 + ', ' + rnd3 + ' ' + rnd4\n  } else if (type === 4) {\n    // Whirling Crush of Darling Star\n    return pick(nm6) + ' ' + pick(nm3) + ' of ' + pick(nm4) + ' ' + pick(nm5)\n  } else {\n    // error\n    console.error('macro expected 0 <= i <= 4')\n    return 'Anime Overflow'\n  }\n}\n\nfunction setupHookToReplaceNextAttackWith (animeName) {\n  Hooks.once('preCreateChatMessage', (data, options, userId) => {\n    if (userId !== game.userId) {\n      return ui.notifications.info(\n        `canceling ${animeName} because message was created by different user`)\n    }\n\n    // edit ability name\n    let base = null\n    let newName = null\n    data.content = data.content.replace(/<h3 class=\"item-name\">([^<]*)<\\/h3>/,\n      (a, b) => {\n        base = b.trim()\n        newName = animeAttackNameGen()\n        return `<h3 class=\"item-name\">${newName}!</h3>`\n      })\n    console.info(`animefied ${base} into ${newName}!`)\n\n    // edit icon\n    const newImg = animeImageGen()\n    if (newImg !== null) {\n      data.content = data.content.replace(/<img src=\"[^\"]*\" title=/,\n        `<img src=\"${newImg}\" title=`)\n    }\n  })\n}\n\nasync function main () {\n  setupHookToReplaceNextAttackWith()\n}\n\nmain()","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/YptofqA.png","actorIds":[]}
{"_id":"zt4HqqSzUZAoiyd3","name":"Show Names, Hide Bars","permission":{"default":0,"chBZeKgbHJ17qeha":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.CPnS1Cbm4QNdVIPA"}},"scope":"global","command":"/*\n--- Show Names, Hide Bars ---\nFor all selected tokens, names will be shown and bars will be hidden.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/show-names-hide-bars.js\nsuggested icon:\nhttps://i.imgur.com/Wrt5uIE.png\n*/\n\nmain()\n\nasync function main () {\n  // Update all selected tokens (yeah I know it's better to update them all at once than one by one but I'm lazy)\n  for (let token of canvas.tokens.controlled) {\n    await token.update({\n      displayBars: CONST.TOKEN_DISPLAY_MODES.NONE,\n      displayName: CONST.TOKEN_DISPLAY_MODES.ALWAYS,\n    })\n  }\n}","author":"chBZeKgbHJ17qeha","img":"https://i.imgur.com/Wrt5uIE.png","actorIds":[]}
{"_id":"Lobzs9iq2jyOxaWr","name":"toggle-hide","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.9ntTXvIXEvsMDKGr"}},"scope":"global","command":"/*\nstate = true, false, or \"flip\"\ntokenNameOrTileId  = \"robert\" or \"sDdak6s4KJd\"\n*/\nconst state = args[0], tokenNameOrTileId = args[1]\n\nmain()\n\nfunction main() {\n  if (state === undefined || tokenNameOrTileId === undefined) { ui.notifications.error(`expecting two arguments for toggle-hide: state, tokenNameOrTileId`);  return}\n  let t = canvas.tokens.placeables.find(t=>t.name.toLowerCase().includes(tokenNameOrTileId.toLowerCase()))\n  if (!t) t = canvas.tiles.get(tokenNameOrTileId)\n  if (!t) return ui.notifications.error(`could not find token/tile ${tokenNameOrTileId}`)\n  const newState = state === true ? true : state === false ? false : state === \"flip\" ? !t.data.hidden : null\n  if (newState === null) return ui.notifications.error(`invalid state: ${state}`)\n  t.update({'hidden': newState})\n}","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"W0u1PnP3PA5ykgND","name":"check-crit","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.8djHTKOeuTF7gUPG"}},"scope":"global","command":"/*\n--- check-crit ---\nChecks if a given BetterRolls5e chat message is a critical hit.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/check-crit.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nconst chatMessage = args[0]\nconst isCrit = chatMessage.data.flags.betterrolls5e.entries[1].isCrit\nreturn isCrit","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"htZYBc9CxRzrtjBW","name":"Highlight map locations","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.oxOYcnWUNAhAlPIY"}},"scope":"global","command":"/*\n--- Highlight Map Locations ---\nIn an overworld map scene, there's a neat trick to let GMs and players create transparent tokens - which use an image\nsuch as https://i.imgur.com/FWKBcnS.png or \"..../Transparent_Token.png\" for invisible areas that show their names when\nyou hover over them.\n\nThis macro will toggle a strong highlight for all such invisible tokens, making their names stay shown and adding\nspinning lights around the tokens, until the macro is used again to deactivate this.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/highlight-map-locations.js\nsuggested icon:\nhttps://i.imgur.com/DkNojdN.png\n */\n\nmain()\n\nfunction main() {\n  const updates = canvas.tokens.placeables\n    .filter(tok => tok.data.img.includes(\"Transparent\") || tok.data.img.includes(\"FWKBcnS\"))\n    .map(tok => {\n      const highlight = tok.data.brightLight !== 0.1\n      return {\n        _id: tok.id,\n        \"displayName\": highlight ? CONST.TOKEN_DISPLAY_MODES.ALWAYS : CONST.TOKEN_DISPLAY_MODES.HOVER,\n        \"lightAlpha\": highlight ? 0.25 : 1,\n        \"brightLight\": highlight ? 0.1 : 0,\n        \"lightColor\": highlight ? \"#ffee00\" : \"\",\n        \"lightAnimation\": {\n          type: highlight ? \"sunburst\" : \"\",\n          speed: highlight ? 3 : 5,\n          intensity: highlight ? 10 : 5\n        },\n      }\n    })\n\n  console.log(`highlighting ${updates.length} tokens...`)\n  canvas.tokens.updateMany(updates)\n}","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/DkNojdN.png","actorIds":[]}
{"_id":"w5cprDx5RWRGN56s","name":"play-sound","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.LFC8JNeSeNdP2GoQ"}},"scope":"global","command":"/*\n--- play-sound ---\nPlays one of the sounds predefined in this macro.\nEach possible soundType (e.g. \"shield_bash\", \"punch\") has a list of possible sounds to choose from, one of which will be picked.\n\n\nargs:\n  0 - a string matching one of the sound types defined here, or \"SOUND_CHECK\"\n  1 - true to play for all players in the game, false to play just for yourself.  leave blank for true.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/play-sound.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\n\nconst soundType = args[0]\nconst playForEveryone = args[1] !== \"false\" && args[1] !== false\n\n/*\n each sound effect is defined as a list with two items:\n volume, URL.\n */\nconst SOUNDS = {\n  \"treasure\": [\n    [1, \"https://freesound.org/data/previews/495/495005_6299573-lq.mp3\"],\n    [1, \"https://freesound.org/data/previews/404/404359_7114905-lq.mp3\"],\n    [1, \"https://freesound.org/data/previews/519/519630_2402876-lq.mp3\"],\n    [1, \"https://freesound.org/data/previews/109/109662_945474-lq.mp3\"],\n  ],\n  \"monster-snarl\": [\n    [1, \"https://freesound.org/data/previews/416/416044_1738686-lq.mp3\"],\n  ],\n  \"door-open\": [\n    [1, \"https://freesound.org/data/previews/444/444160_9024515-lq.mp3\"],\n  ],\n  \"door-close\": [\n    [0.1, \"https://freesound.org/data/previews/104/104525_1525198-lq.mp3\"],\n  ],\n  \"vanish\": [\n    [1, \"https://freesound.org/data/previews/538/538013_3025423-lq.mp3\"],\n  ],\n  \"enlarge\": [\n    [1, \"https://freesound.org/data/previews/523/523204_6142149-lq.mp3\"],\n  ],\n  \"future-beam\": [\n    [1, \"https://freesound.org/data/previews/455/455207_6142149-lq.mp3\"],\n  ],\n  \"haste\": [\n    [1, \"https://freesound.org/data/previews/219/219571_71257-lq.mp3\"],\n  ],\n  \"slow\": [\n    [1, \"https://freesound.org/data/previews/219/219570_71257-lq.mp3\"],\n  ],\n  \"firebolt\": [\n    [1, \"https://freesound.org/data/previews/249/249819_3756348-lq.mp3\"],\n  ],\n  \"shield_bash\": [\n    [0.7, \"https://freesound.org/data/previews/319/319590_5436764-lq.mp3\"]\n  ],\n  \"punch\": [\n    [1, \"https://www.myinstants.com/media/sounds/punch.mp3\"],\n    [1, \"https://www.myinstants.com/media/sounds/punch-sound-effect.mp3\"],\n    [0.8, \"https://www.myinstants.com/media/sounds/punch_vtoclN1.mp3\"],\n    [1, \"https://freesound.org/data/previews/118/118513_2136023-lq.mp3\"],\n  ],\n  \"anime_super_punch\": [\n    [0.3, \"https://www.myinstants.com/media/sounds/strongpunch.mp3\"],\n  ],\n  \"whoosh\": [\n    [0.8, \"https://freesound.org/data/previews/60/60009_71257-lq.mp3\"],\n    [0.8, \"https://freesound.org/data/previews/60/60013_71257-lq.mp3\"],\n    [1, \"https://freesound.org/data/previews/19/19312_84709-lq.mp3\"],\n  ],\n  \"arrow\": [\n    [1, \"https://freesound.org/data/previews/321/321552_5488813-lq.mp3\"],\n    [1, \"https://freesound.org/data/previews/321/321129_3853968-lq.mp3\"],\n  ],\n  \"arrow_miss\": [\n    [5, \"https://freesound.org/data/previews/406/406403_2825490-lq.mp3\"],\n  ],\n  \"three_shuriken\": [\n    [1, \"https://freesound.org/data/previews/215/215012_1979597-lq.mp3\"],\n  ],\n  \"axe_throw\": [\n    [1, \"https://freesound.org/data/previews/492/492224_6596968-lq.mp3\"],\n  ],\n  \"gust\": [\n    [1, \"https://freesound.org/data/previews/377/377600_5828440-lq.mp3\"],\n  ],\n  \"stone_slide\": [\n    [1, \"worlds/retrovirus/scenes/music/stone_slide.mp3\"],\n  ],\n  \"stab_flesh\": [\n    [1, \"https://freesound.org/data/previews/179/179222_3337554-lq.mp3\"],\n    [1, \"https://freesound.org/data/previews/435/435238_5523662-lq.mp3\"],\n  ],\n  \"gravitic_spiral\": [\n    [0.3, \"https://freesound.org/data/previews/323/323504_5554674-lq.mp3\"],\n  ],\n}\n\n// used for checking that all sounds have a good volume\nif (args[0] === 'SOUND_CHECK') {\n  console.log(`SOUND CHECK`)\n  for (const soundType of Object.keys(SOUNDS)) {\n    for (const sound of SOUNDS[soundType]) {\n      // play, print, and wait 2 seconds\n      console.log(`playing from ${soundType}: ${sound[0]}, ${sound[1]}`)\n      AudioHelper.play({src: sound[1], volume: sound[0], autoplay: true, loop: false}, false);\n      await new Promise(resolve => setTimeout(resolve, 2 * 1000))\n    }\n  }\n  return\n}\n\nconst soundsArray = SOUNDS[soundType]\nif (soundsArray === undefined || !soundsArray.length) return ui.notifications.error(`${soundType} (1st arg) is not listed in the SOUNDS array of play-sound as an array!`)\nif (args[1] === undefined) return ui.notifications.error(`${args[1]} (2nd arg) should be true or false!`)\n\nconst sound = soundsArray[Math.floor(Math.random() * soundsArray.length)]\nAudioHelper.play({src: sound[1], volume: sound[0], autoplay: true, loop: false}, playForEveryone);","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/tPNQzq6.png","actorIds":[]}
{"_id":"NrZbwYv566kdxQyK","name":"token-image-shift","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.EF38FYWbmD31FlvY"}},"scope":"global","command":"/*\nfirst argument is token name, second argument is kind of change (number or + or -)\nif argument is a number (e.g. '8') we'll set that image\nif arg is '+' we'll go forward without looping\nif arg is '-' we'll go backwards without looping\nif arg is 'c'/'cycle' we'll go forward and loop\nif arg is 'uc'/'uncycle' we'll go backwards and loop\n*/\n\nconst SCOPE = 'world'\nconst KEY_OPTIONS = 'token-image-swap'\nconst KEY_CURRENT_INDEX = 'token-image-swap_index'\n\nconst argName = args[0], argChange = args[1]\nconst argNum = parseInt(argChange)\nconst argPlus = argChange === '+' || argChange === 'next' || argChange === 'cycle' || argChange === 'c'\nconst argMinus = argChange === '-' || argChange === 'prev' || argChange === 'uncycle' || argChange === 'uc'\nconst cycle = argChange === 'c' || argChange === 'cycle' || argChange === 'uc' || argChange === 'uncycle'\n\nmain()\n\nfunction main() {\n  const tok = canvas.tokens.placeables.find(t=>t.name.toLowerCase().includes(argName.toLowerCase()))\n  if (tok === undefined)\n    return ui.notifications.error(`did not find token with name: ${argName}`)\n  const actor = tok.actor\n  if (!actor)\n    return ui.notifications.error('Cannot apply macro to tokens without an actor.')\n  if (\n    actor.getFlag(SCOPE, KEY_OPTIONS) === undefined ||\n    actor.getFlag(SCOPE, KEY_OPTIONS).length === 0\n  )\n    return ui.notifications.error(\n      'Please hold the Ctrl key while activating the Token Image Swap macro, to set up images.')\n  const imagesText = actor.data.flags[SCOPE][KEY_OPTIONS]\n  const options = imagesText.split('\\n')\n    .map(it => it.split('#')[0].trim())  // remove comments\n    .filter(it => it)  // remove empty lines\n  const optionImgs = options.map(it => it.split(' ')[0])\n  const optionScales = options\n    .map(it => it.split(' ')[1] || '1.0')\n    .map(it => parseFloat(it))\n  let imgIndex = actor.getFlag(SCOPE, KEY_CURRENT_INDEX) || 0  // || 0 is for backwards compatibility\n  if (!(0 <= imgIndex && imgIndex < options.length)) imgIndex = 0\n  const delta = argMinus ? -1 : argPlus ? +1 : 0\n\n  const nextIndex = delta !== 0 ?\n     cycle ?\n        (imgIndex + options.length + delta) % options.length \n        : Math.min(Math.max(imgIndex + delta, 0), options.length - 1) \n     : argNum\n\n  if (isNaN(nextIndex) || nextIndex < 0 || nextIndex >= options.length) return ui.notifications.error(`bad token-image-shift input! ${arg}`)\n  const nextImg = optionImgs[nextIndex]\n  const nextScale = optionScales[nextIndex]\n  tok.update({'img': nextImg, 'scale': nextScale})\n  tok.actor.setFlag(SCOPE, KEY_CURRENT_INDEX, nextIndex)\n}\n\nfunction setupTokenImages(tok) {\n  const actor = tok.actor\n  let existingUrlsValue = actor.getFlag(SCOPE, KEY_OPTIONS) || ''\n  if (existingUrlsValue && !existingUrlsValue.endsWith('\\n'))\n    existingUrlsValue += '\\n'\n  if (!existingUrlsValue.includes(tok.data.img)) {\n    // add current to list\n    existingUrlsValue += tok.data.img + ' ' + tok.data.scale + '   # ' + tok.name + '\\n'\n  }\n  const dialog = new Dialog({\n    title: `Token Image Swap - image list for ${actor.name}`,\n    content: `\n     <p>Please put image links here, each in a new line. You can add comments after URLs by adding \n     one or more spaces; for example, \"https://i.imgur.com/Ja8iNNg.png &nbsp;&nbsp;&nbsp;dragon form\".</p>\n      <div>\n       <textarea style=\"height: 250px\" id=\"urls-text\" name=\"urls\" autofocus=\"autofocus\">${existingUrlsValue}</textarea>\n      </div>\n     `,\n    buttons: {\n      one: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: 'Set images',\n        callback: (html) => {\n          const urlsText = html.find('#urls-text')[0].value\n          actor.setFlag(SCOPE, KEY_OPTIONS, urlsText)\n          if (actor.getFlag(SCOPE, KEY_CURRENT_INDEX) === undefined)\n            tok.actor.setFlag(SCOPE, KEY_CURRENT_INDEX, 0)\n          existingUrlsValue = urlsText\n          console.log(`Token Image Swap | setting image list for ${actor.name}: ${urlsText}`)\n        },\n      },\n      two: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: 'Cancel',\n        callback: () => {\n          console.log('Token Image Swap | canceled token image setup')\n        },\n      },\n    },\n    // NO DEFAULT - on purpose, to allow Enter key in text input\n    // default: 'one',\n  })\n  dialog.position.width = 500\n  dialog.render(true)\n}","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"ej6agMUuTCHbRMPB","name":"item-dir-info","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"core":{"sourceId":"Macro.PqLdFcJuUmZN9KA3"}},"scope":"global","command":"/*\n--- item-dir-info ---\nPrints the name, image, and description of an item in the Items Directory to the chat.\n\nUseful for Trigger-Happy, to show players a description of something.\n\nargs:\n  0 - name or ID of an item in the Items Directory, e.g. \"WHv51MteNMtsUpVp\" or \"Cool Whip\"\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/item-dir-info.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nconst itemNameOrId = args[0], characterName = args[1]\n\nmain()\n\nfunction main() {\n  const item = ItemDirectory.collection.getName(itemNameOrId) || ItemDirectory.collection.get(itemNameOrId)\n  if (!item) return ui.notifications.error(`${itemNameOrId} is not an item name or ID that belongs to the item directory!`)\n\n  const someoneFoundText = characterName ? `\n    <div style=\"line-height: 32px\"><i>${characterName} found...</i></div>\n  ` : ``\n  const image = item.data.img === \"icons/svg/mystery-man.svg\" ? '' : `\n  <div style=\"text-align: center;\">\n    <img src=${item.data.img} style=\"width: 128px;\"/>\n  </div>`\n  const content = `\n    ${someoneFoundText}\n    <h3 style=\"font-family: 'Press Start',monospace\">${item.name}</h3>\n    ${image}\n    ${item.data.data.description.value}\n  `\n  ChatMessage.create({content})\n}","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"QA7SZOBO6tttj3un","name":"print-id","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.C4Ekbdb6E6UQIyYb"}},"scope":"global","command":"/*\n--- print-id ---\nCreates a private chat message with the ID of the currently selected token/tile/wall.\n\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/print-id.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nconst controlled = canvas.tokens.controlled[0] || canvas.tiles.controlled[0] || canvas.walls.controlled[0]\nconst id = controlled ? controlled.id : 'no tile/token selected'\nChatMessage.create({content: id, whisper: [game.user._id]})","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"1Y2pvknuiIRJ6roN","name":"door-toggle","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.GeH2v0KhrEw2GN24"}},"scope":"global","command":"/*\n--- door-toggle ---\nWill open or close one door (wall).\nFirst argument is door ID, second argument is \"open\" or \"close\" or \"toggle\".\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/door-toggle.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n */\n\nconst doorId = args[0]\nconst command = args[1]\nconst wall = canvas.walls.get(doorId)\nif (wall === undefined) return ui.notifications.error(`bad door ID: ${doorId}`)\n\nlet newDoorState\nif (command === 'open') newDoorState = 1\nif (command === 'close') newDoorState = 0\nif (command === 'toggle') newDoorState = 1 - wall.data.ds\nif (newDoorState === undefined) return ui.notifications.error(`bad command: ${command}`)\n\nwall.update({\n  ds: newDoorState,\n})","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"Oifw9W5OR3IcazT2","name":"Reset Activation State","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.hBUnMS0G6AT1a8n3"}},"scope":"global","command":"/*\n--- Reset Activation State ---\nWill \"reset\" all selected tokens that were \"opened\" by the treasure-chest macro and similar stuff.\nIf you hold Ctrl while activating the macro, it will \"activate\" them instead (but not show any contents).\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/reset-activation-state.js\nsuggested icon:\nhttps://i.imgur.com/pHWzz8u.png\n */\n\nconst FLAG_SCOPE = 'world'\nconst FLAG_KEY_TOGGLE = 'macro-toggle-activation-state'\nconst FLAG_KEY_IMAGE_SWAP = 'token-image-swap'\n\nmain()\n\nfunction main() {\n  const close = !game.keyboard._downKeys.has('Control')\n  let updates\n  if (close) {\n    updates = canvas.tokens.controlled\n      .filter(tok => tok.getFlag(FLAG_SCOPE, FLAG_KEY_TOGGLE) === true)\n      .map(tok => {\n        if (tok.actor && tok.actor.getFlag(FLAG_SCOPE, FLAG_KEY_IMAGE_SWAP)) {\n          game.macros.getName('token-image-shift').renderContent(tok.name, '-')\n        }\n        return {\n          _id: tok.id,\n          [`flags.${FLAG_SCOPE}.-=${FLAG_KEY_TOGGLE}`]: null\n        }\n      })\n  } else {\n    updates = canvas.tokens.controlled\n      .filter(tok => tok.getFlag(FLAG_SCOPE, FLAG_KEY_TOGGLE) !== true)\n      .map(tok => {\n        if (tok.actor && tok.actor.getFlag(FLAG_SCOPE, FLAG_KEY_IMAGE_SWAP)) {\n          game.macros.getName('token-image-shift').renderContent(tok.name, '+')\n        }\n        return {\n          _id: tok.id,\n          [`flags.${FLAG_SCOPE}.${FLAG_KEY_TOGGLE}`]: true\n        }\n      })\n  }\n\n  console.log(`${close ? 'Closed' : 'Opened'} ${updates.length} treasure chest tokens.`)\n  canvas.tokens.updateMany(updates)\n}","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/pHWzz8u.png","actorIds":[]}
{"_id":"YXlHR8WZaeJWQyVU","name":"secret-wall-lever","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.KbGcUH0oWYVFmNRt"}},"scope":"global","command":"/*\n--- secret-wall-lever ---\nA complex macro that combines several other macros, and is meant to be triggered when a player character presses a lever/button on the map, toggling between two states.\n- Takes a toggle type argument: \"toggle\", \"on\" or \"off\".\n  toggle will always flip the existing states, while on and off will activate/open/shift and deactivate/close/unshift everything.\n- Lever will shift image.\n- All wall IDs in the arguments will toggle open/close (like doors)\n- All Tile IDs in the arguments will shift their image or hide/unhide (if they don't have token-image-swap setup)\n- A sound effect will be played\n\nUsage in TriggerHappy:\n    @Token[BUTTON_TOKEN_NAME] @ChatMessage[/secret-wall-lever BUTTON_TOKEN_NAME TOGGLE_TYPE SFX_NAME WALL_IDs(...) TILE_IDs(...)]\ne.g.\n    @Token[SyneButton2] @ChatMessage[/secret-wall-lever SyneButton2 toggle stone_slide M2enUpbpVxbwG99t 1lBbRrYcu2v6pTIR MNzXVzI5fEexK0bX YtvDOeUzl6nGxqec hPnrgSPQMt62OIyR]\n    @Token[SyneButton1] @ChatMessage[/secret-wall-lever SyneButton1 toggle vanish qq7XCpCnTwiW123D K0DVa1BR0HRTR5nH 43Sp1VEXfmoeredM eJUlR6acEMe1fyAg iujgdLQ7bQL9hUVb 9sInyF2TcWjtPJEK]\n\nYou should first set up your lever token and optionally tiles with token-image-swap, where image 0 is closed and 1 is open.\n\n\n\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/secret-wall-lever.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n */\n\nconst leverTokenName = args[0], toggleType = args[1], sfxName = args[2], ids = args.slice(3)\n\nconst FLAG_SCOPE = 'world'\nconst FLAG_KEY_TOGGLE = 'macro-toggle-activation-state'\nconst FLAG_KEY_IMAGE_SWAP = 'token-image-swap'\nconst FLAG_KEY_TILE_IMAGE_SHIFT = 'tile-image-shift'\n\nmain()\n\nfunction main() {\n  // basic argument checks and handling\n  if (!['toggle', 'on', 'off'].includes(toggleType)) return ui.notifications.error(`invalid toggle type: ${toggleType}`)\n  const leverToken = canvas.tokens.placeables.find(t => t.name === leverTokenName)\n  if (!leverToken) return ui.notifications.error(`${leverTokenName} cannot be found on the scene!`)\n  const walls = []\n  const tiles = []\n  ids.forEach(id => {\n    const wall = canvas.walls.get(id)\n    if (wall) return walls.push(wall)\n    const tile = canvas.tiles.get(id)\n    if (tile) return tiles.push(tile)\n    console.error(`Failed to find wall/tile with ID ${id}`)\n  })\n  if (ids.length !== walls.length + tiles.length) return ui.notifications.warn(`Failed to find some walls/tiles, see console log`)\n\n  const currentActivationState = leverToken.getFlag(FLAG_SCOPE, FLAG_KEY_TOGGLE)\n  const newActivationState = toggleType === 'toggle' ? !currentActivationState : toggleType === 'on'\n  console.log(`Button pressed: ${leverTokenName}.  state change from ${currentActivationState} to ${newActivationState}`)\n\n  // update lever (only if its state is changing)\n  // will also play sound only if state is changing\n  if (currentActivationState !== newActivationState) {\n    leverToken.setFlag(FLAG_SCOPE, FLAG_KEY_TOGGLE, true)\n    game.macros.getName('play-sound').renderContent(sfxName, true)\n    if (leverToken.getFlag(FLAG_SCOPE, FLAG_KEY_IMAGE_SWAP)) {\n      game.macros.getName('token-image-shift').renderContent(leverTokenName, 'toggle' ? 'cycle' : newActivationState ? 'next' : 'prev')\n    }\n  }\n\n  // update all walls\n  const wallUpdates = walls.map(wall => {\n    return {\n      _id: wall.id,\n      ds: toggleType === 'toggle' ? (1 - wall.data.ds) : +newActivationState\n    }\n  })\n  canvas.walls.updateMany(wallUpdates)\n\n  // update all tiles\n  tiles.forEach(tile => {\n    if (tile.getFlag(FLAG_SCOPE, FLAG_KEY_TILE_IMAGE_SHIFT)) {\n      game.macros.getName('tile-image-shift').renderContent(tile.id, newActivationState ? 'next' : 'prev')\n    } else {\n      tile.update({\n        'hidden': toggleType === 'toggle' ? !tile.data.hidden : newActivationState\n      })\n    }\n  })\n}","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"gVAkXSubjwp0p4wg","name":"treasure-chest","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"core":{"sourceId":"Macro.yWXyXRPSajFtzkCv"}},"scope":"global","command":"/*\n--- treasure-chest ---\nA complex macro that combines several other macros, and is meant to be triggered when a player character walks into a chest to open it.\n- Treats the \"toggle activation state\" flag as the open/closed state of a chest token.\n- If the chest is already open, nothing will happen (making sure the macro isn't called multiple times in a session).  Otherwise...\n- Chest token will change to look open.\n- \"Treasure\" sound effect will be played\n- Item description will be shown in chat\n\nUsage in TriggerHappy:\n    @Token[CHEST_TOKEN_NAME] @ChatMessage[/treasure-chest \"CHEST_TOKEN_NAME\" \"LOOT_ITEM_NAME_OR_ID\"] @Trigger[move stopMovement]\ne.g.\n    @Token[synetownchest1] @ChatMessage[/treasure-chest \"synetownchest1\" \"Gold Coins (50gp)\"] @Trigger[move stopMovement]\n\nYou should first set up your chest token with token-image-swap, where image 0 is closed and 1 is open.\ne.g.\n    https://i.imgur.com/CYKqSqG.png 1   # closed\n    https://i.imgur.com/UMFeNYs.png 1   # open\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/treasure-chest.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n */\n\nconst chestTokenName = args[0], lootItemNameOrId = args[1]\n\nconst FLAG_SCOPE = 'world'\nconst FLAG_KEY_TOGGLE= 'macro-toggle-activation-state'\n\nmain()\n\nfunction main() {\n  const tokenName = token ? token.name : null\n  const chestToken = canvas.tokens.placeables.find(t => t.name === chestTokenName)\n  if (!chestToken) return ui.notifications.error(`${chestTokenName} cannot be found on the scene!`)\n  const chestIsOpen = chestToken.getFlag(FLAG_SCOPE, FLAG_KEY_TOGGLE)\n  if (chestIsOpen === true) {\n    console.log(`Treasure chest is already open: ${chestTokenName}, touched by token: ${tokenName}`)\n    return\n  }\n  console.log(`Treasure chest opened: ${chestTokenName}, by token: ${tokenName}`)\n  chestToken.setFlag(FLAG_SCOPE, FLAG_KEY_TOGGLE, true)\n\n  game.macros.getName('token-image-shift').renderContent(chestTokenName, '+')\n  game.macros.getName('play-sound').renderContent('treasure', true)\n  game.macros.getName('item-dir-info').renderContent(lootItemNameOrId, tokenName)\n}","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"o8CZlv5zObKl6IPJ","name":"tile-image-shift","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.dkbmmYD6DRInnDbG"}},"scope":"global","command":"/*\n--- tile-image-shift ---\n(similar to token-image-shift but for tiles.  useful for TriggerHappy automation)\n\nfirst argument is tile ID, second argument is kind of change (number or + or -)\nif 2nd argument is a number (e.g. '8') we'll set that image\nif arg is '+' we'll go forward without looping\nif arg is '-' we'll go backwards without looping\nif arg is 'c'/'cycle' we'll go forward and loop\nif arg is 'uc'/'uncycle' we'll go backwards and loop\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/tile-image-shift.js\nsuggested icon:\nhttps://i.imgur.com/iw4sH39.png\n*/\n\nconst SCOPE = 'world'\nconst KEY_OPTIONS = 'tile-image-shift'\nconst KEY_CURRENT_INDEX = 'tile-image-shift_index'\n\nconst argId = args[0], argChange = args[1]\nconst argNum = parseInt(argChange)\nconst argPlus = argChange === '+' || argChange === 'next' || argChange === 'cycle' || argChange === 'c' || args.length === 0\nconst argMinus = argChange === '-' || argChange === 'prev' || argChange === 'uncycle' || argChange === 'uc'\nconst cycle = argChange === 'c' || argChange === 'cycle' || argChange === 'uc' || argChange === 'uncycle' || args.length === 0\n\nmain()\n\nfunction main() {\n  if (game.keyboard._downKeys.has('Control')) {\n    return setupTileImages(canvas.tiles.controlled[0])\n  }\n  const tile = canvas.tiles.get(argId) || (argChange === undefined && canvas.tiles.controlled[0])\n  if (tile === undefined) {\n    return ui.notifications.error(`did not find tile with id: ${argId}.  hold Ctrl to set up for controlled tile.`)\n  }\n  if (\n    tile.getFlag(SCOPE, KEY_OPTIONS) === undefined ||\n    tile.getFlag(SCOPE, KEY_OPTIONS).length === 0\n  )\n    return ui.notifications.error('Please hold the Ctrl key while activating the tile-image-shift macro, to set up images.')\n  const imagesText = tile.getFlag(SCOPE, KEY_OPTIONS)\n  const options = imagesText.split('\\n')\n    .map(it => it.split('#')[0].trim())  // remove comments\n    .filter(it => it)  // remove empty lines\n  const optionImgs = options.map(it => it.split(' ')[0])\n  const optionScales = options\n    .map(it => it.split(' ')[1] || '1.0')\n    .map(it => parseFloat(it))\n  let imgIndex = tile.getFlag(SCOPE, KEY_CURRENT_INDEX)\n  if (!(0 <= imgIndex && imgIndex < options.length)) imgIndex = 0\n  const delta = argMinus ? -1 : argPlus ? +1 : 0\n\n  const nextIndex = delta !== 0 ?\n    cycle ?\n      (imgIndex + options.length + delta) % options.length\n      : Math.min(Math.max(imgIndex + delta, 0), options.length - 1)\n    : argNum\n\n  if (isNaN(nextIndex) || nextIndex < 0 || nextIndex >= options.length) return ui.notifications.error(`bad tile-image-shift input! ${argChange}`)\n  const nextImg = optionImgs[nextIndex]\n  const nextScale = optionScales[nextIndex]\n  tile.update({'img': nextImg, 'scale': nextScale})\n  tile.setFlag(SCOPE, KEY_CURRENT_INDEX, nextIndex)\n}\n\nfunction setupTileImages(tile) {\n  let existingUrlsValue = tile.getFlag(SCOPE, KEY_OPTIONS) || ''\n  if (existingUrlsValue && !existingUrlsValue.endsWith('\\n'))\n    existingUrlsValue += '\\n'\n  if (!existingUrlsValue.includes(tile.data.img)) {\n    // add current to list\n    existingUrlsValue += tile.data.img + ' ' + tile.data.scale + '   # default/first\\n'\n  }\n  const dialog = new Dialog({\n    title: `Tile Image Shift - image list for ${tile.id}`,\n    content: `\n     <p>Please put image links here, each in a new line. You can add comments after URLs by adding \n     one or more spaces; for example, \"https://i.imgur.com/Ja8iNNg.png &nbsp;&nbsp;&nbsp;dragon form\".</p>\n      <div>\n       <textarea style=\"height: 250px\" id=\"urls-text\" name=\"urls\" autofocus=\"autofocus\">${existingUrlsValue}</textarea>\n      </div>\n     `,\n    buttons: {\n      one: {\n        icon: '<i class=\"fas fa-check\"></i>',\n        label: 'Set images',\n        callback: (html) => {\n          const urlsText = html.find('#urls-text')[0].value\n          tile.setFlag(SCOPE, KEY_OPTIONS, urlsText)\n          if (tile.getFlag(SCOPE, KEY_CURRENT_INDEX) === undefined)\n            tile.setFlag(SCOPE, KEY_CURRENT_INDEX, 0)\n          existingUrlsValue = urlsText\n          console.log(`setting image list for ${tile.id}: ${urlsText}`)\n        },\n      },\n      two: {\n        icon: '<i class=\"fas fa-times\"></i>',\n        label: 'Cancel',\n        callback: () => {\n          console.log('canceled tile image setup')\n        },\n      },\n    },\n    // NO DEFAULT - on purpose, to allow Enter key in text input\n    // default: 'one',\n  })\n  dialog.position.width = 500\n  dialog.render(true)\n}","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
{"_id":"mbE8EuG0Ss4VjvjA","name":"look-at-my-art","permission":{"default":0,"1yFlGOkuadtmZFBc":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.BUDE3PjtYLcJKONQ"}},"scope":"global","command":"/*\n--- look-at-my-art ---\nCreate a chat message with artwork of selected/targeted token.\n\nsource:\nhttps://github.com/itamarcu/foundry-macros/blob/master/look-at-my-art.js\nsuggested icon:\nhttps://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/openmoji/252/framed-picture_1f5bc.png\n*/\n\nmain()\n\nfunction main() {\n  const tok = canvas.tokens.controlled[0]\n  if (tok === undefined) return ui.notifications.warn('Please select a token first.')\n  let target = tok.actor || tok\n  const content = `\n  <img src=${target.data.img} style=\"width: 280px;\"/>\n  `\n  ChatMessage.create({content})\n}","author":"1yFlGOkuadtmZFBc","img":"https://i.imgur.com/iw4sH39.png","actorIds":[]}
